var documenterSearchIndex = {"docs":
[{"location":"examples/comprehensive_demo/#Comprehensive-Framework-Demonstration","page":"Comprehensive Demo","title":"Comprehensive Framework Demonstration","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Complete demonstration of OptimShortestPaths capabilities across all features and domains.","category":"page"},{"location":"examples/comprehensive_demo/#Overview","page":"Comprehensive Demo","title":"Overview","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"The comprehensive demo showcases the entire OptimShortestPaths framework including:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Problem Transformation Philosophy - How to cast ANY problem as shortest paths\nCore Algorithm Capabilities - DMY, BMSSP, pivot selection\nMulti-Objective Optimization - Pareto fronts and decision methods\nDomain Applications - Drug discovery, metabolism, treatment, supply chain\nPerformance Benchmarking - DMY vs Dijkstra across graph sizes","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#Running-the-Demo","page":"Comprehensive Demo","title":"Running the Demo","text":"","category":"section"},{"location":"examples/comprehensive_demo/#Setup","page":"Comprehensive Demo","title":"Setup","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"cd examples/comprehensive_demo\njulia --project=. -e \"using Pkg; Pkg.develop(path=\\\"../..\\\"); Pkg.instantiate()\"","category":"page"},{"location":"examples/comprehensive_demo/#Run-Complete-Demonstration","page":"Comprehensive Demo","title":"Run Complete Demonstration","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"julia --project=. comprehensive_demo.jl","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Output includes:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Problem transformation examples\nAlgorithm validation tests\nMulti-objective Pareto analysis\nAll 4 domain applications\nPerformance comparisons","category":"page"},{"location":"examples/comprehensive_demo/#Generate-Publication-Quality-Figures","page":"Comprehensive Demo","title":"Generate Publication-Quality Figures","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"julia --project=. generate_figures.jl","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Generates 7 figures (300 DPI, Nature/Science quality):","category":"page"},{"location":"examples/comprehensive_demo/#Figure-1:-OptimShortestPaths-Philosophy","page":"Comprehensive Demo","title":"Figure 1: OptimShortestPaths Philosophy","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"(Image: Philosophy)","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Domain-Agnostic Problem Transformation:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Top panel: Any Optimization Problem → State Space → Graph Model\nCore principle: Transform ANY optimization into shortest path\nBottom panel: Concrete resource scheduling example showing the transformation","category":"page"},{"location":"examples/comprehensive_demo/#Figure-2:-Problem-Casting-Methodology","page":"Comprehensive Demo","title":"Figure 2: Problem Casting Methodology","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"(Image: Methodology)","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"8-Step Systematic Workflow:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Problem Analysis → 2. State Mapping → 3. Transition Design → 4. Cost Modeling\nGraph Construction → 6. Algorithm Selection → 7. Solution Extraction → 8. Validation","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Key Success Factors: Complete State Space • Accurate Cost Function • Proper Constraint Handling","category":"page"},{"location":"examples/comprehensive_demo/#Figure-3:-Multi-Domain-Applications","page":"Comprehensive Demo","title":"Figure 3: Multi-Domain Applications","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"(Image: Multi-Domain)","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"8 Diverse Application Domains:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Supply Chain, Healthcare, Finance, Manufacturing (top/sides)\nEnergy Grid, Transportation, Scheduling, Network Design (sides/bottom)\nCentral hub: OptimShortestPaths connects all domains\nEach domain shows specific casting: States → Edges → Weights","category":"page"},{"location":"examples/comprehensive_demo/#Figure-4:-Supply-Chain-Network-Example","page":"Comprehensive Demo","title":"Figure 4: Supply Chain Network Example","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"(Image: Supply Chain)","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Real-World 22-Node Network:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"3 Factories → 4 Warehouses → 5 Distribution Centers → 2 Customer Regions\nOptimization: Total cost $34,180, Utilization 82%, DMY runtime 0.095ms\n31% cost reduction vs manual planning","category":"page"},{"location":"examples/comprehensive_demo/#Figure-5:-Multi-Objective-Optimization","page":"Comprehensive Demo","title":"Figure 5: Multi-Objective Optimization","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"(Image: Multi-Objective)","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Pareto Front Analysis (4 panels):","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Cost-Time trade-off: 150 solutions, 22 Pareto optimal (14.7% efficiency)\nCost-Quality trade-off: Higher quality requires higher cost\nTime-Quality trade-off: Faster completion sacrifices quality\nSummary: Data generation method, results, best values from Pareto set","category":"page"},{"location":"examples/comprehensive_demo/#Figure-6:-Real-World-Performance-Comparison","page":"Comprehensive Demo","title":"Figure 6: Real-World Performance Comparison","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"(Image: Real-World Apps)","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"OptimShortestPaths vs Traditional Methods across 6 domains:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Average improvement: +22.3%\nSpeed: 15-30% faster execution\nMemory: 15-23% less usage\nAccuracy: 2-5% better solutions\nScalability: 20-32% better scaling\nBaselines clearly stated for each domain","category":"page"},{"location":"examples/comprehensive_demo/#Figure-7:-Algorithm-Performance-Comparison","page":"Comprehensive Demo","title":"Figure 7: Algorithm Performance Comparison","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"(Image: Performance)","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Left panel: Log-log performance plot","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"OptimShortestPaths-DMY: O(m log^(2/3) n) - Blue circles\nDijkstra: O((m+n)log n) - Orange squares\nBellman-Ford (estimate): O(mn) - Green diamonds\nCrossover at n ≈ 1,800 vertices","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Right panel: Speedup analysis with side-by-side bars","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"vs Dijkstra: 0.3×, 0.4×, 0.4×, 1.8×, 4.8×\nvs Bellman-Ford: 0.3×, 0.4×, 0.4×, 1.7×, 4.6×\nBreak-even line at 1× clearly shown","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#Framework-Philosophy","page":"Comprehensive Demo","title":"Framework Philosophy","text":"","category":"section"},{"location":"examples/comprehensive_demo/#The-Core-Insight","page":"Comprehensive Demo","title":"The Core Insight","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Every optimization problem seeks the \"best path\" through a decision space.","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"By transforming to shortest paths, you can:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"✅ Leverage powerful graph algorithms\n✅ Handle complex multi-objective scenarios\n✅ Use domain-agnostic generic tools\n✅ Scale to large problem instances","category":"page"},{"location":"examples/comprehensive_demo/#Transformation-Methodology","page":"Comprehensive Demo","title":"Transformation Methodology","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"8-Step Process:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Problem Analysis: Identify decisions, objectives, constraints\nState Mapping: Enumerate states and properties\nTransition Design: Define valid moves and dependencies\nCost Modeling: Quantify costs and penalties\nGraph Construction: Build G=(V,E,w)\nAlgorithm Selection: Choose DMY vs Dijkstra\nSolution Extraction: Run algorithm, get path\nValidation & Refinement: Verify and iterate","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#Multi-Domain-Demonstrations","page":"Comprehensive Demo","title":"Multi-Domain Demonstrations","text":"","category":"section"},{"location":"examples/comprehensive_demo/#1.-Drug-Discovery","page":"Comprehensive Demo","title":"1. Drug Discovery","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"# Example from demo\ndrugs = [\"Aspirin\", \"Ibuprofen\"]\ntargets = [\"COX-1\", \"COX-2\"]\naffinities = [(\"Aspirin\", \"COX-1\", 2.5), ...]\n\nnetwork = create_drug_target_network(drugs, targets, affinities)\ndistance, path = find_drug_target_paths(network, \"Aspirin\", \"COX-2\")","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Demonstrates: Biochemical affinity → graph distance transformation","category":"page"},{"location":"examples/comprehensive_demo/#2.-Metabolic-Pathways","page":"Comprehensive Demo","title":"2. Metabolic Pathways","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"# Example from demo\nmetabolites = [\"Glucose\", \"G6P\", \"F6P\", \"Pyruvate\", \"ATP\"]\nreactions = [(\"Hexokinase\", \"Glucose\", \"G6P\", -1.0), ...]\n\npathway = create_metabolic_pathway(metabolites, reactions)\natp_yield, path = find_metabolic_pathway(pathway, \"Glucose\", \"ATP\")","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Demonstrates: Bipartite enzyme-metabolite graphs","category":"page"},{"location":"examples/comprehensive_demo/#3.-Treatment-Protocols","page":"Comprehensive Demo","title":"3. Treatment Protocols","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"# Example from demo\ntreatments = [\"Initial\", \"ChemoA\", \"Surgery\", \"Remission\"]\ncosts = [0.0, 50.0, 100.0, 0.0]\nefficacy = [0.0, 0.6, 0.8, 1.0]\ntransitions = [(\"Initial\", \"ChemoA\", 0.1), ...]\n\nprotocol = create_treatment_protocol(treatments, costs, efficacy, transitions)\ncost, sequence = optimize_treatment_sequence(protocol, \"Initial\", \"Remission\")","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Demonstrates: Clinical decision graphs with multi-criteria trade-offs","category":"page"},{"location":"examples/comprehensive_demo/#4.-Supply-Chain","page":"Comprehensive Demo","title":"4. Supply Chain","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"# Example from demo - generic graph construction\nfactories = 3\nwarehouses = 4\ncustomers = 2\nedges = build_supply_chain_edges(factories, warehouses, customers)\n\ngraph = DMYGraph(n_nodes, edges, shipping_costs)\noptimal_cost = dmy_sssp!(graph, factory_1)[customer_1]","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Demonstrates: Generic graph tools for custom domains","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#Performance-Benchmarking","page":"Comprehensive Demo","title":"Performance Benchmarking","text":"","category":"section"},{"location":"examples/comprehensive_demo/#DMY-vs-Dijkstra","page":"Comprehensive Demo","title":"DMY vs Dijkstra","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"The demo includes comprehensive benchmarks loaded from benchmark_results.txt:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Graph Size DMY Time Dijkstra Time Speedup\n200 0.08ms 0.02ms 0.31×\n500 0.43ms 0.17ms 0.39×\n1,000 1.46ms 0.64ms 0.44×\n2,000 1.42ms 2.51ms 1.77×\n5,000 3.35ms 16.03ms 4.79×","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Key Finding: DMY becomes faster than Dijkstra at approximately n ≈ 1,800 vertices for sparse graphs (m ≈ 2n).","category":"page"},{"location":"examples/comprehensive_demo/#Complexity-Analysis","page":"Comprehensive Demo","title":"Complexity Analysis","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"DMY: O(m log^(2/3) n) - Sublinear in log n\nDijkstra: O((m+n) log n) - Linear in log n\nBellman-Ford: O(mn) - Linear in n","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"For sparse graphs (m = O(n)):","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"DMY: O(n log^(2/3) n)\nDijkstra: O(n log n)\nAsymptotic advantage: log^(1/3) n factor","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#Code-Examples","page":"Comprehensive Demo","title":"Code Examples","text":"","category":"section"},{"location":"examples/comprehensive_demo/#Complete-Demo-Workflow","page":"Comprehensive Demo","title":"Complete Demo Workflow","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"using OptimShortestPaths\n\nprintln(\"=\"^70)\nprintln(\"OptimShortestPaths FRAMEWORK DEMONSTRATION\")\nprintln(\"=\"^70)\n\n# 1. Core Algorithm\nedges = [Edge(1, 2, 1), Edge(2, 3, 2), Edge(1, 3, 3)]\ngraph = DMYGraph(3, edges, [1.0, 2.0, 4.0])\ndistances = dmy_sssp!(graph, 1)\nprintln(\"✓ DMY algorithm works: \", distances)\n\n# 2. Path reconstruction\ndist, path = find_shortest_path(graph, 1, 3)\nprintln(\"✓ Path finding: distance=\", dist, \", path=\", path)\n\n# 3. Multi-objective\nmo_edges = [MultiObjectiveEdge(1, 2, 1)]\nmo_graph = MultiObjectiveGraph(2, mo_edges, [[1.0, 2.0]])\nprintln(\"✓ Multi-objective graph created\")\n\n# 4. Domain-specific\ndrugs = [\"Aspirin\"]\ntargets = [\"COX1\"]\naffinities = [(\"Aspirin\", \"COX1\", 2.5)]\nnetwork = create_drug_target_network(drugs, targets, affinities)\nprintln(\"✓ Drug-target network created\")\n\nprintln(\"\\n✅ All framework components functional!\")","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#Running-the-Demo-2","page":"Comprehensive Demo","title":"Running the Demo","text":"","category":"section"},{"location":"examples/comprehensive_demo/#Interactive-Demonstration","page":"Comprehensive Demo","title":"Interactive Demonstration","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"julia --project=. comprehensive_demo.jl","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Sections covered:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Problem transformation philosophy\nCore algorithm capabilities (SSSP, path reconstruction, bounded search)\nAdvanced features (BMSSP, pivot selection)\nMulti-objective optimization (Pareto fronts, MCDA methods)\nDomain applications (all 4 domains)\nPerformance analysis\nScalability demonstration","category":"page"},{"location":"examples/comprehensive_demo/#Visualization-Suite","page":"Comprehensive Demo","title":"Visualization Suite","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"julia --project=. generate_figures.jl","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Creates 7 publication-ready figures demonstrating all aspects of the framework.","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#What-the-Demo-Shows","page":"Comprehensive Demo","title":"What the Demo Shows","text":"","category":"section"},{"location":"examples/comprehensive_demo/#Problem-Transformation","page":"Comprehensive Demo","title":"Problem Transformation","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Any optimization problem can be cast as shortest paths:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Identify states → Vertices\nDefine transitions → Edges\nQuantify costs → Weights\nSolve → Shortest path algorithm","category":"page"},{"location":"examples/comprehensive_demo/#Algorithm-Capabilities","page":"Comprehensive Demo","title":"Algorithm Capabilities","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"DMY Algorithm Features:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"FindPivots: Frontier sparsification (k = n^(1/3) pivots)\nBMSSP: Bounded multi-source shortest path\nRecursive decomposition: O(log n) layers\nTotal complexity: O(m log^(2/3) n)","category":"page"},{"location":"examples/comprehensive_demo/#Multi-Objective-Power","page":"Comprehensive Demo","title":"Multi-Objective Power","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Pareto Front Computation:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Identifies all non-dominated solutions\nVisualizes trade-off spaces\nSupports 3 decision methods (weighted sum, ε-constraint, lexicographic)\nProvides knee point selection for best compromise","category":"page"},{"location":"examples/comprehensive_demo/#Domain-Versatility","page":"Comprehensive Demo","title":"Domain Versatility","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Framework works for:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Pharmaceutical networks (drug binding)\nBiochemical networks (metabolism)\nClinical networks (treatment)\nLogistics networks (supply chain)\n...and ANY other optimization problem!","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#Performance-Insights","page":"Comprehensive Demo","title":"Performance Insights","text":"","category":"section"},{"location":"examples/comprehensive_demo/#When-to-Use-DMY","page":"Comprehensive Demo","title":"When to Use DMY","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"✅ Large sparse graphs (n > 1,800, m ≈ 2n) ✅ Multi-objective scenarios (no simple alternative) ✅ Research applications (breakthrough algorithm)","category":"page"},{"location":"examples/comprehensive_demo/#When-to-Use-Dijkstra","page":"Comprehensive Demo","title":"When to Use Dijkstra","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"✅ Small graphs (n < 1,000) ✅ Dense graphs (m ≈ n²) ✅ Production systems (well-tested, reliable)","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#Educational-Value","page":"Comprehensive Demo","title":"Educational Value","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"The comprehensive demo serves as:","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Tutorial: Learn the framework step-by-step\nTemplate: Copy code patterns for your problems\nValidation: Verify installation and functionality\nBenchmark: Compare performance on your hardware\nReference: See all features demonstrated","category":"page"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"","category":"page"},{"location":"examples/comprehensive_demo/#See-Also","page":"Comprehensive Demo","title":"See Also","text":"","category":"section"},{"location":"examples/comprehensive_demo/","page":"Comprehensive Demo","title":"Comprehensive Demo","text":"Getting Started - Basic usage\nProblem Transformation - Framework methodology\nMulti-Objective - Pareto optimization\nAll Examples - Other domain examples\nGitHub Demo","category":"page"},{"location":"examples/drug_target_network/#Drug-Target-Network-Analysis","page":"Drug-Target Networks","title":"Drug-Target Network Analysis","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Demonstrates how OptimShortestPaths transforms pharmaceutical drug discovery into a graph shortest-path problem.","category":"page"},{"location":"examples/drug_target_network/#Overview","page":"Drug-Target Networks","title":"Overview","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Drug-target interaction networks map drugs to their molecular targets (proteins, enzymes) with binding affinities. Finding optimal drug pathways requires balancing multiple objectives:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Efficacy: Binding strength to therapeutic target\nSelectivity: Ratio of target binding vs off-target binding\nToxicity: Side effect profile\nCost: Treatment expense","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"OptimShortestPaths casts this as a shortest-path problem where:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Vertices: Drugs and molecular targets\nEdges: Binding interactions\nWeights: Thermodynamically transformed binding affinities","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"","category":"page"},{"location":"examples/drug_target_network/#Problem-Transformation","page":"Drug-Target Networks","title":"Problem Transformation","text":"","category":"section"},{"location":"examples/drug_target_network/#From-Biochemistry-to-Graph","page":"Drug-Target Networks","title":"From Biochemistry to Graph","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Original Problem:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Drugs: [Aspirin, Ibuprofen, Celecoxib, Morphine]\nTargets: [COX-1, COX-2, 5-LOX, MOR, PGHS]\nBinding Affinities: K_d values in nanomolar (nM)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Graph Transformation:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"using OptimShortestPaths\n\n# Create drug-target network\ndrugs = [\"Aspirin\", \"Ibuprofen\", \"Celecoxib\", \"Morphine\"]\ntargets = [\"COX-1\", \"COX-2\", \"5-LOX\", \"MOR\", \"PGHS\"]\n\n# Binding affinities (K_d in nM - lower = stronger binding)\naffinities = [\n    (\"Aspirin\", \"COX-1\", 2.5),\n    (\"Aspirin\", \"COX-2\", 3.2),\n    (\"Ibuprofen\", \"COX-1\", 1.8),\n    (\"Ibuprofen\", \"COX-2\", 2.1),\n    (\"Celecoxib\", \"COX-2\", 0.5),  # Highly selective!\n    # ... more interactions\n]\n\nnetwork = create_drug_target_network(drugs, targets, affinities)","category":"page"},{"location":"examples/drug_target_network/#Thermodynamic-Transformation","page":"Drug-Target Networks","title":"Thermodynamic Transformation","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Binding affinity (K_d) → Graph distance via Gibbs free energy:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"ΔG = RT ln(K_d)\ndistance = ΔG / RT = ln(K_d)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"This ensures:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Strong binding (small K_d) → Short distance (good for shortest path)\nWeak binding (large K_d) → Long distance (avoided by algorithm)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"","category":"page"},{"location":"examples/drug_target_network/#Single-Objective-Analysis","page":"Drug-Target Networks","title":"Single-Objective Analysis","text":"","category":"section"},{"location":"examples/drug_target_network/#Figure-1:-Drug-Target-Binding-Affinity-Matrix","page":"Drug-Target Networks","title":"Figure 1: Drug-Target Binding Affinity Matrix","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"(Image: Binding Affinity Heatmap)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Interpretation:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Matrix shows normalized binding affinities (0=no binding, 1=perfect binding)\nCelecoxib: Strong COX-2 (0.95), weak COX-1 (0.05) → Selective inhibitor\nAspirin: Strong COX-1 (0.85), moderate COX-2 (0.45) → Non-selective\nIbuprofen: Balanced binding to both COX isoforms","category":"page"},{"location":"examples/drug_target_network/#Figure-2:-COX-2/COX-1-Selectivity-Profile","page":"Drug-Target Networks","title":"Figure 2: COX-2/COX-1 Selectivity Profile","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"(Image: COX Selectivity)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Clinical Significance:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Drug Selectivity Interpretation GI Risk\nCelecoxib 20.1x Highly COX-2 selective Low\nIbuprofen 10.5x COX-2 selective Low-Moderate\nAspirin 0.5x COX-1 selective High","category":"page"},{"location":"examples/drug_target_network/#Finding-Most-Selective-COX-2-Inhibitor","page":"Drug-Target Networks","title":"Finding Most Selective COX-2 Inhibitor","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"# Find drug with best COX-2/COX-1 selectivity ratio\ndrugs_to_test = [\"Aspirin\", \"Ibuprofen\", \"Celecoxib\"]\n\nfor drug in drugs_to_test\n    cox2_dist, _ = find_drug_target_paths(network, drug, \"COX-2\")\n    cox1_dist, _ = find_drug_target_paths(network, drug, \"COX-1\")\n\n    selectivity = cox1_dist / cox2_dist  # Higher = more COX-2 selective\n    println(\"$drug selectivity: $(round(selectivity, digits=1))x\")\nend","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Results:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Aspirin selectivity: 0.5x (COX-1 preferring - causes GI bleeding)\nIbuprofen selectivity: 10.5x (COX-2 selective - safer)\nCelecoxib selectivity: 20.1x (Highly COX-2 selective - safest)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Clinical Implication: Celecoxib identified as optimal for patients at high GI bleeding risk.","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"","category":"page"},{"location":"examples/drug_target_network/#Multi-Objective-Optimization","page":"Drug-Target Networks","title":"Multi-Objective Optimization","text":"","category":"section"},{"location":"examples/drug_target_network/#Pareto-Front-Computation","page":"Drug-Target Networks","title":"Pareto Front Computation","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Real drug selection involves 4 competing objectives:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"# Create multi-objective graph\nobjectives = [\n    [efficacy_1, toxicity_1, cost_1, time_1],  # Drug pathway 1\n    [efficacy_2, toxicity_2, cost_2, time_2],  # Drug pathway 2\n    # ... for all possible pathways\n]\n\ngraph = MultiObjectiveGraph(n_vertices, edges, objectives)\n\n# Compute Pareto front\npareto_front = compute_pareto_front(graph, source, target; max_solutions=1000)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Results: 9 Pareto-optimal drug pathways discovered","category":"page"},{"location":"examples/drug_target_network/#Figure-3:-2D-Pareto-Front-Projections","page":"Drug-Target Networks","title":"Figure 3: 2D Pareto Front Projections","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"(Image: Pareto Front 2D)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Four critical trade-offs visualized:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Efficacy vs Toxicity: Higher efficacy drugs have more side effects\nEfficacy vs Cost: Better drugs cost more\nToxicity vs Cost: Safer drugs are expensive\nTime vs Efficacy: Fast-acting drugs may be less effective","category":"page"},{"location":"examples/drug_target_network/#Figure-4:-3D-Pareto-Front-Visualization","page":"Drug-Target Networks","title":"Figure 4: 3D Pareto Front Visualization","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"(Image: Pareto Front 3D)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"3D Trade-off Space: This plot shows the three most critical objectives simultaneously:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"X-axis (Efficacy): Treatment effectiveness (0-100%)\nY-axis (Toxicity): Side effect severity (0-100%)\nZ-axis (Cost): Price in dollars ($0-200)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Each point represents a different drug pathway. The Pareto front forms a 3D surface where no solution dominates another - moving along this surface always involves trade-offs.","category":"page"},{"location":"examples/drug_target_network/#The-9-Pareto-Optimal-Solutions","page":"Drug-Target Networks","title":"The 9 Pareto-Optimal Solutions","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Solution Drug→Target Efficacy Toxicity Cost Time Best For\n1 Morphine→MOR 98% 70% $50 1.0h Emergency/Trauma\n2 Morphine→COX-1 95% 60% $50 1.5h Post-surgery\n3 Aspirin→COX-1 85% 30% $5 2.5h Chronic pain\n4 Aspirin→COX-2 70% 40% $5 3.0h Inflammation\n5 Ibuprofen→COX-1 65% 15% $15 3.5h General use (knee point)\n6 Ibuprofen→COX-2 60% 10% $15 4.0h Elderly patients\n7 Ibuprofen→MOR 55% 10% $15 4.5h Pediatric\n8 Novel→COX-2 45% 5% $200 6.5h High-risk patients\n9 Novel→MOR 40% 3% $200 7.5h Preventive care","category":"page"},{"location":"examples/drug_target_network/#Selecting-the-Best-Solution","page":"Drug-Target Networks","title":"Selecting the Best Solution","text":"","category":"section"},{"location":"examples/drug_target_network/#Option-1:-Weighted-Sum-(Patient-Preferences)","page":"Drug-Target Networks","title":"Option 1: Weighted Sum (Patient Preferences)","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"# Emergency patient: prioritize efficacy, tolerate toxicity\nweights = [0.7, 0.1, 0.1, 0.1]  # [efficacy, toxicity, cost, time]\nbest = weighted_sum_approach(graph, source, target, weights)\n# → Solution 1: Morphine (98% efficacy)","category":"page"},{"location":"examples/drug_target_network/#Option-2:-Constraint-Based-(Clinical-Guidelines)","page":"Drug-Target Networks","title":"Option 2: Constraint-Based (Clinical Guidelines)","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"# Elderly patient: toxicity must be ≤15%, cost ≤\\$20\nconstraints = [Inf, 15.0, 20.0, Inf]\nbest = epsilon_constraint_approach(graph, source, target, 1, constraints)\n# → Solution 5 or 6: Ibuprofen (low toxicity, affordable)","category":"page"},{"location":"examples/drug_target_network/#Option-3:-Knee-Point-(Best-Trade-off)","page":"Drug-Target Networks","title":"Option 3: Knee Point (Best Trade-off)","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"# Let algorithm find best compromise\nbest = get_knee_point(pareto_front)\n# → Solution 5: Ibuprofen→COX-1 (balanced across all objectives)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"","category":"page"},{"location":"examples/drug_target_network/#Algorithm-Performance","page":"Drug-Target Networks","title":"Algorithm Performance","text":"","category":"section"},{"location":"examples/drug_target_network/#Figure-5:-Performance-Analysis","page":"Drug-Target Networks","title":"Figure 5: Performance Analysis","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"(Image: Performance Corrected)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Benchmark Results (from canonical benchmark_results.txt):","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Graph Size Edges DMY (ms) ±95% CI Dijkstra (ms) ±95% CI Speedup\n200 400 0.081 ± 0.002 0.025 ± 0.001 0.31×\n500 1,000 0.426 ± 0.197 0.167 ± 0.004 0.39×\n1,000 2,000 1.458 ± 1.659 0.641 ± 0.008 0.44×\n2,000 4,000 1.415 ± 0.094 2.510 ± 0.038 1.77×\n5,000 10,000 3.346 ± 0.105 16.028 ± 0.241 4.79×","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Key Insights:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Break-even point: n ≈ 1,800 vertices on sparse random graphs\nDMY shows speedup for n > 2,000 (sparse graphs with m ≈ 2n)\nAt n=5,000: 4.79× faster than Dijkstra\nTheoretical O(m log^(2/3) n) complexity confirmed","category":"page"},{"location":"examples/drug_target_network/#Figure-6:-Path-Distance-Analysis","page":"Drug-Target Networks","title":"Figure 6: Path Distance Analysis","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"(Image: Path Distances)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Shows shortest path distances from all drugs to all targets, enabling:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Quick selectivity comparisons\nOff-target binding identification\nMulti-target drug analysis","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"","category":"page"},{"location":"examples/drug_target_network/#Code-Example","page":"Drug-Target Networks","title":"Code Example","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Complete working example:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"using OptimShortestPaths\n\n# Step 1: Define the domain\ndrugs = [\"Aspirin\", \"Ibuprofen\", \"Celecoxib\"]\ntargets = [\"COX-1\", \"COX-2\", \"5-LOX\"]\n\naffinities = [\n    (\"Aspirin\", \"COX-1\", 2.5),\n    (\"Aspirin\", \"COX-2\", 3.2),\n    (\"Ibuprofen\", \"COX-1\", 1.8),\n    (\"Ibuprofen\", \"COX-2\", 2.1),\n    (\"Celecoxib\", \"COX-2\", 0.5),\n    (\"Ibuprofen\", \"5-LOX\", 4.0),\n]\n\n# Step 2: Create network\nnetwork = create_drug_target_network(drugs, targets, affinities)\n\n# Step 3: Single-objective analysis\ndistance, path = find_drug_target_paths(network, \"Celecoxib\", \"COX-2\")\nprintln(\"Celecoxib binding affinity to COX-2: \", exp(distance), \" nM (K_d)\")\n\n# Step 4: Selectivity analysis\nratio = calculate_distance_ratio(network.graph, drug_idx, cox2_idx, cox1_idx)\nprintln(\"COX-2/COX-1 selectivity: \", ratio, \"×\")\n\n# Step 5: Connectivity analysis\nstats = analyze_drug_connectivity(network, \"Ibuprofen\")\nprintln(\"Ibuprofen reaches \", stats[\"reachable_targets\"], \" targets\")","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"","category":"page"},{"location":"examples/drug_target_network/#Running-the-Example","page":"Drug-Target Networks","title":"Running the Example","text":"","category":"section"},{"location":"examples/drug_target_network/#Setup","page":"Drug-Target Networks","title":"Setup","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"cd examples/drug_target_network\njulia --project=. -e \"using Pkg; Pkg.develop(path=\\\"../..\\\"); Pkg.instantiate()\"","category":"page"},{"location":"examples/drug_target_network/#Run-Analysis","page":"Drug-Target Networks","title":"Run Analysis","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"julia --project=. drug_target_network.jl","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Output includes:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Binding affinity heatmap\nCOX selectivity profiles\nPareto front visualizations (2D and 3D)\nPerformance benchmarks\nClinical recommendations","category":"page"},{"location":"examples/drug_target_network/#Generate-Figures","page":"Drug-Target Networks","title":"Generate Figures","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"julia --project=. generate_figures.jl","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Generates:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"binding_affinity_heatmap.png - Affinity matrix\ncox_selectivity.png - Selectivity profiles\ndrug_pareto_front.png - 2D Pareto projections\ndrug_pareto_3d.png - 3D trade-off space\npath_distances.png - All path lengths\nperformance_corrected.png - Algorithm performance","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"","category":"page"},{"location":"examples/drug_target_network/#Key-Insights","page":"Drug-Target Networks","title":"Key Insights","text":"","category":"section"},{"location":"examples/drug_target_network/#Why-This-Matters","page":"Drug-Target Networks","title":"Why This Matters","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Traditional Approach:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Screen drugs one-by-one\nSingle-objective optimization\nMiss complex trade-offs\nExpensive and time-consuming","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"OptimShortestPaths Approach:","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Graph-based unified framework\nMulti-objective optimization\nExplicit trade-off visualization\nEfficient O(m log^(2/3) n) algorithm\nIdentifies all Pareto-optimal pathways simultaneously","category":"page"},{"location":"examples/drug_target_network/#Clinical-Impact","page":"Drug-Target Networks","title":"Clinical Impact","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Personalized Medicine: Match drug to patient profile via Pareto front selection\nRisk Assessment: Quantify efficacy-toxicity trade-offs explicitly\nCost-Effectiveness: Find affordable solutions meeting efficacy thresholds\nDecision Support: Algorithm-guided clinical decision making","category":"page"},{"location":"examples/drug_target_network/#Research-Applications","page":"Drug-Target Networks","title":"Research Applications","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Drug repurposing (finding new uses for existing drugs)\nPolypharmacy optimization (drug combination therapy)\nSide effect prediction (off-target binding analysis)\nLead compound optimization (structure-activity relationships)","category":"page"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"","category":"page"},{"location":"examples/drug_target_network/#See-Also","page":"Drug-Target Networks","title":"See Also","text":"","category":"section"},{"location":"examples/drug_target_network/","page":"Drug-Target Networks","title":"Drug-Target Networks","text":"Problem Transformation - General framework\nMulti-Objective Optimization - Pareto methods\nAPI Reference - Function documentation\nGitHub Example - Full source code","category":"page"},{"location":"manual/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide will help you get started with OptimShortestPaths.","category":"page"},{"location":"manual/getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"OptimShortestPaths\")","category":"page"},{"location":"manual/getting_started/#Your-First-Shortest-Path","page":"Getting Started","title":"Your First Shortest Path","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"using OptimShortestPaths\n\n# Create a simple graph: 1 → 2 → 3\n#                        └─────→ 3\nedges = [\n    Edge(1, 2, 1),  # Edge from vertex 1 to 2 (id=1)\n    Edge(2, 3, 2),  # Edge from vertex 2 to 3 (id=2)\n    Edge(1, 3, 3)   # Direct edge from 1 to 3 (id=3)\n]\nweights = [1.0, 2.0, 4.0]  # Edge weights (costs)\n\ngraph = DMYGraph(3, edges, weights)\n\n# Run DMY algorithm from source vertex 1\ndistances = dmy_sssp!(graph, 1)\n\nprintln(\"Shortest distances from vertex 1:\")\nprintln(\"  to vertex 1: \", distances[1])  # 0.0\nprintln(\"  to vertex 2: \", distances[2])  # 1.0\nprintln(\"  to vertex 3: \", distances[3])  # 3.0 (via 1→2→3, not direct 1→3)","category":"page"},{"location":"manual/getting_started/#Path-Reconstruction","page":"Getting Started","title":"Path Reconstruction","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"To get the actual path, not just distances:","category":"page"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"# Use variant that returns parent tree\ndistances, parent = dmy_sssp_with_parents!(graph, 1)\n\n# Reconstruct path from source to target\npath = reconstruct_path(parent, 1, 3)\nprintln(\"Path from 1 to 3: \", path)  # [1, 2, 3]","category":"page"},{"location":"manual/getting_started/#Using-High-Level-Interface","page":"Getting Started","title":"Using High-Level Interface","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"# Even simpler - one function call\ndistance, path = find_shortest_path(graph, 1, 3)\nprintln(\"Distance: \", distance)  # 3.0\nprintln(\"Path: \", path)          # [1, 2, 3]","category":"page"},{"location":"manual/getting_started/#Next-Steps","page":"Getting Started","title":"Next Steps","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"Learn about Problem Transformation\nExplore Multi-Objective Optimization\nSee Domain Applications for real-world examples\nCheck API Reference for all functions","category":"page"},{"location":"benchmarks/#Performance-Benchmarks","page":"Benchmarks","title":"Performance Benchmarks","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Comprehensive performance analysis of the DMY algorithm implementation.","category":"page"},{"location":"benchmarks/#Experimental-Setup","page":"Benchmarks","title":"Experimental Setup","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Hardware: Julia 1.9+ on modern CPU\nGraph Types: Sparse random graphs (m ≈ 2n edges)\nBaseline: Simple Dijkstra implementation\nMethodology: 40 warm-up trials per solver, 95% confidence intervals\nSource: benchmark_results.txt and test/benchmark_performance.jl","category":"page"},{"location":"benchmarks/#Results","page":"Benchmarks","title":"Results","text":"","category":"section"},{"location":"benchmarks/#DMY-vs-Dijkstra","page":"Benchmarks","title":"DMY vs Dijkstra","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Graph Size Edges DMY (ms) ±95% CI Dijkstra (ms) ±95% CI Speedup\n200 400 0.081 ± 0.002 0.025 ± 0.001 0.31×\n500 1,000 0.426 ± 0.197 0.167 ± 0.004 0.39×\n1,000 2,000 1.458 ± 1.659 0.641 ± 0.008 0.44×\n2,000 4,000 1.415 ± 0.094 2.510 ± 0.038 1.77×\n5,000 10,000 3.346 ± 0.105 16.028 ± 0.241 4.79×","category":"page"},{"location":"benchmarks/#Key-Findings","page":"Benchmarks","title":"Key Findings","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Crossover point: DMY becomes faster than Dijkstra at approximately n ≈ 1,800 vertices\nScaling: DMY shows better asymptotic scaling as predicted by theory\nBest case: 4.79× speedup observed at n=5,000 vertices\nSparse graphs: Results are for graphs with m ≈ 2n (realistic for many applications)","category":"page"},{"location":"benchmarks/#Complexity-Analysis","page":"Benchmarks","title":"Complexity Analysis","text":"","category":"section"},{"location":"benchmarks/#Theoretical-Complexity","page":"Benchmarks","title":"Theoretical Complexity","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Algorithm Time Complexity Space Complexity\nDMY O(m log^(2/3) n) O(n + m)\nDijkstra O((m+n) log n) O(n + m)\nBellman-Ford O(mn) O(n + m)","category":"page"},{"location":"benchmarks/#Asymptotic-Comparison","page":"Benchmarks","title":"Asymptotic Comparison","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"For sparse graphs where m = O(n):","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Dijkstra: O(n log n)\nDMY: O(n log^(2/3) n)\nRatio: log^(1/3) n advantage for DMY","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"At n = 10,000:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"log^(1/3)(10,000) ≈ 4.64× theoretical speedup","category":"page"},{"location":"benchmarks/#Practical-Considerations","page":"Benchmarks","title":"Practical Considerations","text":"","category":"section"},{"location":"benchmarks/#When-DMY-is-Faster","page":"Benchmarks","title":"When DMY is Faster","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"✅ Large sparse graphs (n > 2,000, m ≈ 2n) ✅ Many shortest-path queries (amortize initialization cost) ✅ Academic/research applications","category":"page"},{"location":"benchmarks/#When-Dijkstra-is-Faster","page":"Benchmarks","title":"When Dijkstra is Faster","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"✅ Small graphs (n < 1,000) ✅ Dense graphs (m ≈ n²) ✅ Single query on simple graph","category":"page"},{"location":"benchmarks/#Recommendations","page":"Benchmarks","title":"Recommendations","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"n < 1,000: Use Dijkstra (built-in or LightGraphs.jl)\n1,000 < n < 2,000: Either algorithm works\nn > 2,000: Use DMY for better performance\nMulti-objective: Use OptimShortestPaths regardless of size (no simple alternative)","category":"page"},{"location":"benchmarks/#Running-Your-Own-Benchmarks","page":"Benchmarks","title":"Running Your Own Benchmarks","text":"","category":"section"},{"location":"benchmarks/#Quick-Benchmark","page":"Benchmarks","title":"Quick Benchmark","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"using OptimShortestPaths\nusing BenchmarkTools\n\n# Create test graph\nn = 5000\nedges = Edge[]\nweights = Float64[]\nfor i in 1:n-1\n    push!(edges, Edge(i, i+1, length(edges)+1))\n    push!(weights, rand())\n    if rand() < 0.5  # Add some shortcuts\n        j = min(i + rand(2:100), n)\n        push!(edges, Edge(i, j, length(edges)+1))\n        push!(weights, rand(1.0:10.0))\n    end\nend\n\ngraph = DMYGraph(n, edges, weights)\n\n# Benchmark DMY\n@btime dmy_sssp!($graph, 1)","category":"page"},{"location":"benchmarks/#Comprehensive-Benchmark-Suite","page":"Benchmarks","title":"Comprehensive Benchmark Suite","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Run the full benchmark suite:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"julia --project=. test/benchmark_performance.jl","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This generates benchmark_results.txt with detailed timing data for various graph sizes.","category":"page"},{"location":"benchmarks/#Multi-Objective-Performance","page":"Benchmarks","title":"Multi-Objective Performance","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Multi-objective optimization is inherently more expensive:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Operation Complexity Notes\nSingle objective O(m log^(2/3) n) Standard DMY\nWeighted sum O(m log^(2/3) n) Same as single\nPareto front O(k · m log^(2/3) n) k = Pareto set size\nε-constraint O(d · m log^(2/3) n) d = discretization steps","category":"page"},{"location":"benchmarks/#Pareto-Front-Size","page":"Benchmarks","title":"Pareto Front Size","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"The Pareto set can grow exponentially with:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Number of objectives (2-3 manageable, 4+ slow)\nGraph structure (more paths = larger Pareto set)\nObjective correlation (conflicting objectives = more solutions)","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Recommendation: Use max_solutions parameter to bound computation:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"pareto_front = compute_pareto_front(graph, source, target; max_solutions=1000)","category":"page"},{"location":"benchmarks/#Memory-Usage","page":"Benchmarks","title":"Memory Usage","text":"","category":"section"},{"location":"benchmarks/#Single-Objective-DMY","page":"Benchmarks","title":"Single-Objective DMY","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Graph storage: O(n + m)\nDistance array: O(n)\nFrontier sets: O(n) worst case\nTotal: O(n + m)","category":"page"},{"location":"benchmarks/#Multi-Objective-Pareto","page":"Benchmarks","title":"Multi-Objective Pareto","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Graph storage: O(d · (n + m)) where d = number of objectives\nSolution storage: O(k · p) where k = Pareto size, p = path length\nTotal: O(d·(n+m) + k·p)","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"For n=1000, d=3, k=100, p=10: ≈ 10 KB (very efficient)","category":"page"},{"location":"benchmarks/#Algorithm-Details","page":"Benchmarks","title":"Algorithm Details","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"The DMY algorithm uses:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"FindPivots: O(|U|) frontier sparsification\nBMSSP: O(k·B·m) bounded multi-source shortest path\nRecursive decomposition: O(log n) layers","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"These combine to achieve the O(m log^(2/3) n) bound.","category":"page"},{"location":"benchmarks/#Reproducibility","page":"Benchmarks","title":"Reproducibility","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"All benchmark data is canonical and version-controlled:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Data file: benchmark_results.txt\nGeneration script: test/benchmark_performance.jl\nFigures: Generated from canonical data via examples/comprehensive_demo/generate_figures.jl","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"To reproduce benchmarks on your hardware:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"julia --project=. test/benchmark_performance.jl > benchmark_results.txt\ncd examples/comprehensive_demo\njulia --project=. generate_figures.jl  # Regenerate with your data","category":"page"},{"location":"benchmarks/#See-Also","page":"Benchmarks","title":"See Also","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"API Reference for function signatures\nExamples for usage patterns\nGitHub Benchmarks for raw data","category":"page"},{"location":"manual/transformation/#Problem-Transformation","page":"Problem Transformation","title":"Problem Transformation","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"The core innovation of OptimShortestPaths is transforming arbitrary optimization problems into shortest-path problems.","category":"page"},{"location":"manual/transformation/#The-Transformation-Framework","page":"Problem Transformation","title":"The Transformation Framework","text":"","category":"section"},{"location":"manual/transformation/#Step-1:-Identify-States","page":"Problem Transformation","title":"Step 1: Identify States","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Map your problem's decision points or configurations to graph vertices.","category":"page"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Examples:","category":"page"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Scheduling: Time slots × resources × task states\nPortfolio: Asset allocation configurations\nTreatment: Patient health states","category":"page"},{"location":"manual/transformation/#Step-2:-Define-Transitions","page":"Problem Transformation","title":"Step 2: Define Transitions","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Map valid actions or state changes to directed edges.","category":"page"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Examples:","category":"page"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Scheduling: Assigning a task to a resource\nPortfolio: Buying/selling an asset\nTreatment: Applying a specific treatment","category":"page"},{"location":"manual/transformation/#Step-3:-Quantify-Costs","page":"Problem Transformation","title":"Step 3: Quantify Costs","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Transform objectives into non-negative edge weights.","category":"page"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Examples:","category":"page"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Time to complete\nFinancial cost\nRisk score (must be ≥ 0)","category":"page"},{"location":"manual/transformation/#Step-4:-Solve-as-Shortest-Path","page":"Problem Transformation","title":"Step 4: Solve as Shortest Path","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Run the DMY algorithm to find optimal solutions.","category":"page"},{"location":"manual/transformation/#Using-the-Transformation-API","page":"Problem Transformation","title":"Using the Transformation API","text":"","category":"section"},{"location":"manual/transformation/#High-Level-Interface","page":"Problem Transformation","title":"High-Level Interface","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"# Define your problem\nproblem = OptimizationProblem(\n    :drug_discovery,           # Problem type\n    (drugs, targets, affinities),  # Problem data\n    1                          # Source vertex\n)\n\n# Solve automatically\ndistances = optimize_to_graph(problem; solver=:dmy)","category":"page"},{"location":"manual/transformation/#Manual-Casting","page":"Problem Transformation","title":"Manual Casting","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"# For custom problems\nfunction my_custom_cast(data)\n    # Extract problem-specific data\n    entities, transitions, costs = data\n\n    # Build edges\n    edges = Edge[]\n    weights = Float64[]\n    for (i, (from, to, cost)) in enumerate(transitions)\n        push!(edges, Edge(from, to, i))\n        push!(weights, cost)\n    end\n\n    # Create graph\n    n_vertices = length(entities)\n    return DMYGraph(n_vertices, edges, weights)\nend\n\n# Use it\ngraph = my_custom_cast(my_data)\ndistances = dmy_sssp!(graph, source)","category":"page"},{"location":"manual/transformation/#Domain-Agnostic-Examples","page":"Problem Transformation","title":"Domain-Agnostic Examples","text":"","category":"section"},{"location":"manual/transformation/#Resource-Scheduling","page":"Problem Transformation","title":"Resource Scheduling","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"# States: Time slots (1-24) × Resources (A, B, C)\n# Edges: Task assignments\n# Weights: Completion time + setup cost\n\nn_time_slots = 24\nn_resources = 3\nn_vertices = n_time_slots * n_resources\n\n# Create edges for valid task assignments\nedges = Edge[]\nweights = Float64[]\n\nfor t in 1:(n_time_slots-1)\n    for r1 in 1:n_resources\n        for r2 in 1:n_resources\n            from_vertex = (t-1)*n_resources + r1\n            to_vertex = t*n_resources + r2\n\n            completion_time = 1.0\n            setup_cost = r1 == r2 ? 0.0 : 2.0  # Penalty for resource change\n\n            push!(edges, Edge(from_vertex, to_vertex, length(edges)+1))\n            push!(weights, completion_time + setup_cost)\n        end\n    end\nend\n\ngraph = DMYGraph(n_vertices, edges, weights)","category":"page"},{"location":"manual/transformation/#Network-Flow","page":"Problem Transformation","title":"Network Flow","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"# States: Network nodes\n# Edges: Links with capacity constraints\n# Weights: Latency + congestion cost\n\n# Transform max-flow to shortest path by:\n# 1. Invert capacity: weight = 1/capacity\n# 2. Add congestion penalty\n# 3. Find min-cost path\n\nfunction capacity_to_weight(capacity, current_flow)\n    congestion = current_flow / capacity\n    return 1/capacity + 10.0 * congestion^2\nend","category":"page"},{"location":"manual/transformation/#Key-Constraints","page":"Problem Transformation","title":"Key Constraints","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"warning: Non-Negative Weights Required\nThe DMY algorithm requires all edge weights ≥ 0. Transform maximization objectives:Revenue → Cost: weight = -revenue + baseline\nProbability → Distance: weight = -log(probability)\nSimilarity → Distance: weight = 1 - similarity","category":"page"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"info: Directed Graphs Only\nAll graphs must be directed. For undirected graphs, add edges in both directions.","category":"page"},{"location":"manual/transformation/#See-Also","page":"Problem Transformation","title":"See Also","text":"","category":"section"},{"location":"manual/transformation/","page":"Problem Transformation","title":"Problem Transformation","text":"Multi-Objective Optimization for handling multiple objectives\nDomain Applications for pre-built transformation helpers\nAPI Reference for complete function documentation","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Complete reference for all exported functions and types in OptimShortestPaths.","category":"page"},{"location":"api/#Core-Algorithm","page":"API Reference","title":"Core Algorithm","text":"","category":"section"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#OptimShortestPaths.dmy_sssp!","page":"API Reference","title":"OptimShortestPaths.dmy_sssp!","text":"dmy_sssp!(graph::DMYGraph, source::Int) -> Vector{Float64}\n\nMain entry point for the DMY shortest-path algorithm. Computes single-source shortest paths from the given source vertex.\n\nArguments\n\ngraph: The directed graph with non-negative edge weights\nsource: Source vertex index (1-based)\n\nReturns\n\nVector of shortest distances from source to all vertices\n\nAlgorithm Overview\n\nThe DMY algorithm uses recursive layering with frontier sparsification:\n\nInitialize distance and parent arrays\nCall recursive_layer! with full vertex set\nReturn computed distances\n\nTime complexity: O(m log^(2/3) n) for sparse graphs Space complexity: O(n) for distance and parent arrays\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.dmy_sssp_with_parents!","page":"API Reference","title":"OptimShortestPaths.dmy_sssp_with_parents!","text":"dmy_sssp_with_parents!(graph::DMYGraph, source::Int) -> Tuple{Vector{Float64}, Vector{Int}}\n\nDMY algorithm that returns both distances and parent pointers for path reconstruction.\n\nReturns\n\nTuple of (distances, parents) where parents[v] gives the predecessor of v in shortest path tree\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.dmy_sssp_bounded!","page":"API Reference","title":"OptimShortestPaths.dmy_sssp_bounded!","text":"dmy_sssp_bounded!(graph::DMYGraph, source::Int, max_distance::Float64) -> Vector{Float64}\n\nDMY algorithm with distance bound - only computes paths up to max_distance. Can be more efficient when only short paths are needed.\n\nArguments\n\ngraph: The directed graph\nsource: Source vertex\nmax_distance: Maximum distance to compute (paths longer than this are ignored)\n\nReturns\n\nDistance array with INF for vertices beyond max_distance\n\n\n\n\n\n","category":"function"},{"location":"api/#Graph-Types","page":"API Reference","title":"Graph Types","text":"","category":"section"},{"location":"api/#OptimShortestPaths.DMYGraph","page":"API Reference","title":"OptimShortestPaths.DMYGraph","text":"DMYGraph\n\nEfficient graph representation for the DMY algorithm using adjacency lists. Stores vertices, edges, and weights with validation for non-negative weights.\n\n\n\n\n\n","category":"type"},{"location":"api/#OptimShortestPaths.Edge","page":"API Reference","title":"OptimShortestPaths.Edge","text":"Edge\n\nRepresents a directed edge in the graph with source, target vertices and weight index.\n\n\n\n\n\n","category":"type"},{"location":"api/#OptimShortestPaths.Block","page":"API Reference","title":"OptimShortestPaths.Block","text":"Block\n\nRepresents a partitioned block of vertices for recursive processing.\n\n\n\n\n\n","category":"type"},{"location":"api/#Algorithm-Components","page":"API Reference","title":"Algorithm Components","text":"","category":"section"},{"location":"api/#OptimShortestPaths.recursive_layer!","page":"API Reference","title":"OptimShortestPaths.recursive_layer!","text":"recursive_layer!(graph::DMYGraph, dist::Vector{Float64}, parent::Vector{Int},\n                U::Vector{Int}, S::OrderedSet{Int}, B::Float64) -> Nothing\n\nRecursive layer processing function that implements the core DMY algorithm logic. Processes vertex subset U with current frontier S and upper bound B.\n\nArguments\n\ngraph: The graph to process\ndist: Distance array (modified in-place)\nparent: Parent array for path reconstruction (modified in-place)\nU: Vertex subset to process\nS: Current frontier set\nB: Upper bound for distance updates\n\nThe function implements the recursive layering strategy with:\n\nBase case handling for small vertex sets\nPivot threshold calculation k = ⌈|U|^(1/3)⌉\nFrontier size checking and algorithm path selection\nPivot selection for frontier sparsification when needed\nVertex partitioning and recursive calls\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.bmssp!","page":"API Reference","title":"OptimShortestPaths.bmssp!","text":"bmssp!(graph::DMYGraph, dist::Vector{Float64}, parent::Vector{Int},\n       frontier::AbstractSet{Int}, bound::Float64, k::Int) -> OrderedSet{Int}\n\nPerform bounded multi-source shortest path relaxation for k rounds. Updates the distance and parent arrays in-place and returns the final frontier.\n\nArguments\n\ngraph: The graph to process\ndist: Distance array (modified in-place)\nparent: Parent array for path reconstruction (modified in-place)\nfrontier: Set of active vertices for relaxation\nbound: Upper bound for distance updates\nk: Maximum number of relaxation rounds\n\nReturns\n\nFinal frontier set after k rounds or early termination\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.bmssp_single_round!","page":"API Reference","title":"OptimShortestPaths.bmssp_single_round!","text":"bmssp_single_round!(graph::DMYGraph, dist::Vector{Float64}, parent::Vector{Int},\n                    frontier::AbstractSet{Int}, bound::Float64) -> Tuple{OrderedSet{Int}, Bool}\n\nPerform a single round of BMSSP relaxation. Returns the new frontier and whether any updates occurred.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.select_pivots","page":"API Reference","title":"OptimShortestPaths.select_pivots","text":"select_pivots(U_tilde::Vector{Int}, S::AbstractSet{Int}, k::Int, dist::Vector{Float64}) -> Vector{Int}\n\nSelect pivot vertices from U_tilde to sparsify the frontier. Uses distance-based clustering to choose representative vertices.\n\nArguments\n\nU_tilde: Filtered vertex set (vertices not in S with finite distance < bound)\nS: Current frontier set\nk: Pivot threshold (typically ⌈|U|^(1/3)⌉)\ndist: Current distance array\n\nReturns\n\nVector of selected pivot vertices with |P| ≤ |U_tilde| / k\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.partition_blocks","page":"API Reference","title":"OptimShortestPaths.partition_blocks","text":"partition_blocks(U::Vector{Int}, dist::Vector{Float64}, t::Int, B::Float64=INF) -> Vector{Block}\n\nPartition vertex set U into 2^t nearly equal blocks based on distance values. Each block gets a frontier seed and upper bound for recursive processing.\n\nArguments\n\nU: Vertex set to partition\ndist: Distance array\nt: Partition parameter (typically ⌈log^(1/3) n⌉)\nB: Overall bound for distances (default: INF)\n\nReturns\n\nVector of Block objects with vertices, frontier, and upper bound\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.partition_blocks_adaptive","page":"API Reference","title":"OptimShortestPaths.partition_blocks_adaptive","text":"partition_blocks_adaptive(U::Vector{Int}, dist::Vector{Float64}, t::Int, \n                         graph::DMYGraph, B::Float64=INF) -> Vector{Block}\n\nAdaptive block partitioning that considers graph structure and distance distribution. Creates more balanced blocks based on both distance and connectivity.\n\n\n\n\n\n","category":"function"},{"location":"api/#Validation","page":"API Reference","title":"Validation","text":"","category":"section"},{"location":"api/#OptimShortestPaths.validate_bmssp_input","page":"API Reference","title":"OptimShortestPaths.validate_bmssp_input","text":"validate_bmssp_input(graph::DMYGraph, dist::Vector{Float64}, parent::Vector{Int},\n                    frontier::AbstractSet{Int}, bound::Float64, k::Int) -> Bool\n\nValidate inputs for BMSSP function. Throws ArgumentError if invalid.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.validate_dmy_input","page":"API Reference","title":"OptimShortestPaths.validate_dmy_input","text":"validate_dmy_input(graph::DMYGraph, source::Int) -> Bool\n\nValidate inputs for DMY algorithm. Throws appropriate errors if invalid.\n\n\n\n\n\n","category":"function"},{"location":"api/#Statistics","page":"API Reference","title":"Statistics","text":"","category":"section"},{"location":"api/#OptimShortestPaths.bmssp_with_statistics!","page":"API Reference","title":"OptimShortestPaths.bmssp_with_statistics!","text":"bmssp_with_statistics!(graph::DMYGraph, dist::Vector{Float64}, parent::Vector{Int},\n                      frontier::AbstractSet{Int}, bound::Float64, k::Int) -> Dict{String, Any}\n\nPerform BMSSP with detailed statistics collection. Returns statistics about the relaxation process.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.dmy_algorithm_statistics","page":"API Reference","title":"OptimShortestPaths.dmy_algorithm_statistics","text":"dmy_algorithm_statistics(graph::DMYGraph, source::Int) -> Dict{String, Any}\n\nRun DMY algorithm with detailed statistics collection. Useful for algorithm analysis and performance tuning.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.count_relaxations","page":"API Reference","title":"OptimShortestPaths.count_relaxations","text":"count_relaxations(graph::DMYGraph, frontier::AbstractSet{Int}, bound::Float64, \n                 dist::Vector{Float64}) -> Int\n\nCount the number of edge relaxations that would be performed in the next round. Useful for algorithm analysis and debugging.\n\n\n\n\n\n","category":"function"},{"location":"api/#Multi-Objective-Optimization","page":"API Reference","title":"Multi-Objective Optimization","text":"","category":"section"},{"location":"api/#Main-Functions-2","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#OptimShortestPaths.MultiObjective.compute_pareto_front","page":"API Reference","title":"OptimShortestPaths.MultiObjective.compute_pareto_front","text":"Compute the full Pareto front for multi-objective shortest paths. Returns all non-dominated paths from source to target.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.MultiObjective.get_knee_point","page":"API Reference","title":"OptimShortestPaths.MultiObjective.get_knee_point","text":"Find the \"knee point\" in the Pareto front - the solution with best trade-off. Uses the maximum distance from the utopia-nadir line.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.MultiObjective.compute_path_objectives","page":"API Reference","title":"OptimShortestPaths.MultiObjective.compute_path_objectives","text":"Compute objective values for a path given parent array. Optionally accepts a vector of edge indices (per vertex) that identifies which multi-objective edge was used to reach each vertex.\n\n\n\n\n\n","category":"function"},{"location":"api/#Optimization-Methods","page":"API Reference","title":"Optimization Methods","text":"","category":"section"},{"location":"api/#OptimShortestPaths.MultiObjective.weighted_sum_approach","page":"API Reference","title":"OptimShortestPaths.MultiObjective.weighted_sum_approach","text":"Weighted sum approach: Combine objectives with weights. Simple but may miss some Pareto-optimal solutions.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.MultiObjective.epsilon_constraint_approach","page":"API Reference","title":"OptimShortestPaths.MultiObjective.epsilon_constraint_approach","text":"Epsilon-constraint approach: Optimize one objective while constraining others. Good for finding specific trade-off solutions.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.MultiObjective.lexicographic_approach","page":"API Reference","title":"OptimShortestPaths.MultiObjective.lexicographic_approach","text":"Lexicographic approach: Optimize objectives in priority order. Good when objectives have clear priority ranking.\n\n\n\n\n\n","category":"function"},{"location":"api/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"api/#OptimShortestPaths.MultiObjective.ParetoSolution","page":"API Reference","title":"OptimShortestPaths.MultiObjective.ParetoSolution","text":"A Pareto-optimal solution with multiple objective values\n\n\n\n\n\n","category":"type"},{"location":"api/#OptimShortestPaths.MultiObjective.MultiObjectiveGraph","page":"API Reference","title":"OptimShortestPaths.MultiObjective.MultiObjectiveGraph","text":"Multi-objective graph structure\n\n\n\n\n\n","category":"type"},{"location":"api/#OptimShortestPaths.MultiObjective.MultiObjectiveEdge","page":"API Reference","title":"OptimShortestPaths.MultiObjective.MultiObjectiveEdge","text":"Edge with multiple objective weights (e.g., distance, cost, risk, time)\n\n\n\n\n\n","category":"type"},{"location":"api/#Problem-Transformation","page":"API Reference","title":"Problem Transformation","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"The core innovation of OptimShortestPaths - transforming optimization problems into graphs.","category":"page"},{"location":"api/#OptimShortestPaths.OptimizationProblem","page":"API Reference","title":"OptimShortestPaths.OptimizationProblem","text":"OptimizationProblem(::Symbol, data, source)\n\nContainer for problem instances that can be transformed into a graph using the OptimShortestPaths casting helpers. data is the argument tuple that will be splatted into the corresponding constructor (e.g. create_drug_target_network).\n\n\n\n\n\n","category":"type"},{"location":"api/#OptimShortestPaths.optimize_to_graph","page":"API Reference","title":"OptimShortestPaths.optimize_to_graph","text":"Main OptimShortestPaths interface: optimize by casting to shortest path.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.cast_problem","page":"API Reference","title":"OptimShortestPaths.cast_problem","text":"Cast an optimization problem to a graph representation. This is the core innovation of OptimShortestPaths: transforming optimization into shortest paths.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.objectives_to_weights","page":"API Reference","title":"OptimShortestPaths.objectives_to_weights","text":"Transform optimization objectives into edge weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#Domain-Specific-Applications","page":"API Reference","title":"Domain-Specific Applications","text":"","category":"section"},{"location":"api/#Pharmaceutical-Networks","page":"API Reference","title":"Pharmaceutical Networks","text":"","category":"section"},{"location":"api/#Types-2","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"api/#OptimShortestPaths.PharmaNetwork","page":"API Reference","title":"OptimShortestPaths.PharmaNetwork","text":"PharmaNetwork\n\nAbstract base type for pharmaceutical network representations.\n\n\n\n\n\n","category":"type"},{"location":"api/#OptimShortestPaths.DrugTargetNetwork","page":"API Reference","title":"OptimShortestPaths.DrugTargetNetwork","text":"DrugTargetNetwork <: PharmaNetwork\n\nRepresents drug-target interaction networks for pharmaceutical applications.\n\n\n\n\n\n","category":"type"},{"location":"api/#OptimShortestPaths.MetabolicPathway","page":"API Reference","title":"OptimShortestPaths.MetabolicPathway","text":"MetabolicPathway <: PharmaNetwork\n\nRepresents metabolic pathway networks with metabolites and enzymatic reactions.\n\n\n\n\n\n","category":"type"},{"location":"api/#OptimShortestPaths.TreatmentProtocol","page":"API Reference","title":"OptimShortestPaths.TreatmentProtocol","text":"TreatmentProtocol <: PharmaNetwork\n\nRepresents treatment protocol networks with treatment steps and transition costs.\n\n\n\n\n\n","category":"type"},{"location":"api/#Constructors","page":"API Reference","title":"Constructors","text":"","category":"section"},{"location":"api/#OptimShortestPaths.Pharma.create_drug_target_network","page":"API Reference","title":"OptimShortestPaths.Pharma.create_drug_target_network","text":"create_drug_target_network(drugs::Vector{String}, targets::Vector{String}, \n                          interactions::Matrix{Float64}) -> DrugTargetNetwork\n\nCreate a drug-target interaction network from drug names, target names, and interaction matrix. The interaction matrix contains binding affinities or interaction strengths.\n\nArguments\n\ndrugs: Vector of drug names\ntargets: Vector of target protein names  \ninteractions: Matrix where interactions[i,j] is the binding affinity between drug i and target j                Use 0.0 for no interaction, positive values for binding affinities\n\nReturns\n\nDrugTargetNetwork with underlying graph representation\n\nNetwork Structure\n\nVertices represent both drugs and targets\nEdges represent drug-target interactions\nEdge weights are -log(binding_affinity) to convert to distance metric\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.Pharma.create_metabolic_pathway","page":"API Reference","title":"OptimShortestPaths.Pharma.create_metabolic_pathway","text":"create_metabolic_pathway(metabolites::Vector{String}, reactions::Vector{String}, \n                       reaction_costs::Vector{Float64}, \n                       reaction_network::Vector{Tuple{String, String, String}}) -> MetabolicPathway\n\nCreate a metabolic pathway network from metabolites, reactions, and their connections.\n\nArguments\n\nmetabolites: Vector of metabolite names\nreactions: Vector of reaction names\nreaction_costs: Vector of costs for each reaction (energy, time, etc.)\nreaction_network: Vector of (substrate, reaction, product) tuples defining the pathway\n\nReturns\n\nMetabolicPathway with underlying graph representation\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.Pharma.create_treatment_protocol","page":"API Reference","title":"OptimShortestPaths.Pharma.create_treatment_protocol","text":"create_treatment_protocol(treatments::Vector{String}, costs::Vector{Float64}, \n                        efficacy_weights::Vector{Float64}, \n                        transitions::Vector{Tuple{String, String, Float64}}) -> TreatmentProtocol\n\nCreate a treatment protocol network for healthcare optimization.\n\nArguments\n\ntreatments: Vector of treatment step names\ncosts: Vector of costs for each treatment\nefficacy_weights: Vector of efficacy weights for each treatment\ntransitions: Vector of (fromtreatment, totreatment, transition_cost) tuples\n\nReturns\n\nTreatmentProtocol with underlying graph representation\n\n\n\n\n\n","category":"function"},{"location":"api/#Analysis-Functions","page":"API Reference","title":"Analysis Functions","text":"","category":"section"},{"location":"api/#OptimShortestPaths.Pharma.find_drug_target_paths","page":"API Reference","title":"OptimShortestPaths.Pharma.find_drug_target_paths","text":"find_drug_target_paths(network::DrugTargetNetwork, drug_name::String, \n                      target_name::String) -> Tuple{Float64, Vector{String}}\n\nFind the shortest path from a drug to a target in the network. Returns the path distance and the sequence of drugs/targets in the path.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.Pharma.analyze_drug_connectivity","page":"API Reference","title":"OptimShortestPaths.Pharma.analyze_drug_connectivity","text":"analyze_drug_connectivity(network::DrugTargetNetwork, drug_name::String) -> Dict{String, Any}\n\nAnalyze the connectivity of a specific drug in the network. Returns statistics about reachable targets and path lengths.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.Pharma.find_metabolic_pathway","page":"API Reference","title":"OptimShortestPaths.Pharma.find_metabolic_pathway","text":"find_metabolic_pathway(pathway::MetabolicPathway, start_metabolite::String, \n                      end_metabolite::String) -> Tuple{Float64, Vector{String}}\n\nFind the shortest metabolic pathway between two metabolites. Returns the total cost and sequence of metabolites in the pathway.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.Pharma.optimize_treatment_sequence","page":"API Reference","title":"OptimShortestPaths.Pharma.optimize_treatment_sequence","text":"optimize_treatment_sequence(protocol::TreatmentProtocol, start_treatment::String, \n                           end_treatment::String) -> Tuple{Float64, Vector{String}}\n\nFind the optimal treatment sequence from start to end treatment. Returns the total cost and sequence of treatments.\n\n\n\n\n\n","category":"function"},{"location":"api/#Generic-Graph-Utilities","page":"API Reference","title":"Generic Graph Utilities","text":"","category":"section"},{"location":"api/#Path-Operations","page":"API Reference","title":"Path Operations","text":"","category":"section"},{"location":"api/#OptimShortestPaths.find_shortest_path","page":"API Reference","title":"OptimShortestPaths.find_shortest_path","text":"find_shortest_path(graph::DMYGraph, source::Int, target::Int)\n\nFind the shortest path and distance between two vertices.\n\nReturns\n\nTuple of (distance, path) where path is vector of vertex indices\n\nExample\n\ndistance, path = find_shortest_path(graph, start, goal)\nif distance < INF\n    println(\"Path found: \", join(path, \" -> \"))\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.reconstruct_path","page":"API Reference","title":"OptimShortestPaths.reconstruct_path","text":"reconstruct_path(parent::Vector{Int}, source::Int, target::Int) -> Vector{Int}\n\nReconstruct the shortest path from source to target using parent pointers. Returns empty vector if no path exists.\n\nArguments\n\nparent: Parent array from DMY algorithm\nsource: Source vertex\ntarget: Target vertex\n\nReturns\n\nVector of vertices representing the path from source to target\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.shortest_path_tree","page":"API Reference","title":"OptimShortestPaths.shortest_path_tree","text":"shortest_path_tree(parent::Vector{Int}, source::Int) -> Dict{Int, Vector{Int}}\n\nConstruct the complete shortest path tree from the parent array. Returns a dictionary mapping each reachable vertex to its path from source.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.path_length","page":"API Reference","title":"OptimShortestPaths.path_length","text":"path_length(path::Vector{Int}, graph::DMYGraph) -> Float64\n\nCalculate the total length of a path in the graph. Returns INF if path is invalid or contains non-existent edges.\n\n\n\n\n\n","category":"function"},{"location":"api/#Connectivity-Analysis","page":"API Reference","title":"Connectivity Analysis","text":"","category":"section"},{"location":"api/#OptimShortestPaths.analyze_connectivity","page":"API Reference","title":"OptimShortestPaths.analyze_connectivity","text":"analyze_connectivity(graph::DMYGraph, source::Int)\n\nAnalyze connectivity metrics from a source vertex.\n\nReturns\n\nDictionary containing:\n\nreachable_count: Number of reachable vertices\nunreachable_count: Number of unreachable vertices  \navg_distance: Average distance to reachable vertices\nmax_distance: Maximum finite distance\nconnectivity_ratio: Fraction of vertices that are reachable\n\nExample\n\nmetrics = analyze_connectivity(graph, hub_vertex)\nprintln(\"Hub connectivity: \", metrics[\"connectivity_ratio\"] * 100, \"%\")\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.find_reachable_vertices","page":"API Reference","title":"OptimShortestPaths.find_reachable_vertices","text":"find_reachable_vertices(graph::DMYGraph, source::Int, max_distance::Float64 = INF)\n\nFind all vertices reachable from source within a maximum distance.\n\nArguments\n\ngraph: The graph to analyze\nsource: Source vertex\nmax_distance: Maximum distance threshold (default: INF for all reachable)\n\nReturns\n\nVector of vertex indices that are reachable within max_distance\n\nExample\n\n# Find all vertices within distance 10 from source\nnearby = find_reachable_vertices(graph, source, 10.0)\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.graph_reachability","page":"API Reference","title":"OptimShortestPaths.graph_reachability","text":"graph_reachability(graph::DMYGraph, source::Int) -> Set{Int}\n\nFind all vertices reachable from the source vertex. Uses simple BFS traversal.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.is_connected","page":"API Reference","title":"OptimShortestPaths.is_connected","text":"is_connected(graph::DMYGraph, source::Int, target::Int) -> Bool\n\nCheck if there is a direct edge from source to target vertex.\n\n\n\n\n\n","category":"function"},{"location":"api/#Distance-Metrics","page":"API Reference","title":"Distance Metrics","text":"","category":"section"},{"location":"api/#OptimShortestPaths.calculate_distance_ratio","page":"API Reference","title":"OptimShortestPaths.calculate_distance_ratio","text":"calculate_distance_ratio(graph::DMYGraph, source::Int, target1::Int, target2::Int)\n\nCalculate the ratio of distances from source to two different targets. This is a generic function useful for selectivity, preference, or comparison metrics.\n\nArguments\n\ngraph: The graph to analyze\nsource: Source vertex\ntarget1: First target vertex (numerator in ratio)\ntarget2: Second target vertex (denominator in ratio)\n\nReturns\n\nRatio of distance to target1 / distance to target2\nReturns 0.0 if either distance is 0 or unreachable\nReturns Inf if target2 is unreachable but target1 is reachable\n\nExample\n\n# For drug selectivity: higher ratio means more selective for target2\nratio = calculate_distance_ratio(graph, drug_vertex, cox1_vertex, cox2_vertex)\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.calculate_path_preference","page":"API Reference","title":"OptimShortestPaths.calculate_path_preference","text":"calculate_path_preference(graph::DMYGraph, source::Int, preferred::Int, alternative::Int)\n\nCalculate preference score for reaching one target over another from a source. Higher values indicate stronger preference for the preferred target.\n\nArguments\n\ngraph: The graph to analyze\nsource: Source vertex\npreferred: Preferred target vertex\nalternative: Alternative target vertex\n\nReturns\n\nPreference score (higher is better for preferred target)\nUses inverse distance ratio so lower distance = higher preference\n\nExample\n\n# Check if pathway A is preferred over pathway B\npreference = calculate_path_preference(graph, start, pathwayA, pathwayB)\nif preference > 1.5\n    println(\"Strong preference for pathway A\")\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.compare_sources","page":"API Reference","title":"OptimShortestPaths.compare_sources","text":"compare_sources(graph::DMYGraph, sources::Vector{Int}, target::Int)\n\nCompare distances from multiple sources to a single target.\n\nArguments\n\ngraph: The graph to analyze\nsources: Vector of source vertices to compare\ntarget: Target vertex\n\nReturns\n\nDictionary mapping source vertex to distance to target\n\nExample\n\n# Compare which warehouse is closest to customer\nwarehouses = [1, 2, 3]\ncustomer = 10\ndistances = compare_sources(graph, warehouses, customer)\nbest_warehouse = argmin(distances)\n\n\n\n\n\n","category":"function"},{"location":"api/#Graph-Properties","page":"API Reference","title":"Graph Properties","text":"","category":"section"},{"location":"api/#OptimShortestPaths.vertex_count","page":"API Reference","title":"OptimShortestPaths.vertex_count","text":"vertex_count(graph::DMYGraph) -> Int\n\nReturn the number of vertices in the graph.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.edge_count","page":"API Reference","title":"OptimShortestPaths.edge_count","text":"edge_count(graph::DMYGraph) -> Int\n\nReturn the number of edges in the graph.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.out_degree","page":"API Reference","title":"OptimShortestPaths.out_degree","text":"out_degree(graph::DMYGraph, vertex::Int) -> Int\n\nReturn the out-degree of the specified vertex.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.outgoing_edges","page":"API Reference","title":"OptimShortestPaths.outgoing_edges","text":"outgoing_edges(graph::DMYGraph, vertex::Int) -> Vector{Int}\n\nReturn the indices of all outgoing edges from the specified vertex.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.graph_density","page":"API Reference","title":"OptimShortestPaths.graph_density","text":"graph_density(graph::DMYGraph) -> Float64\n\nCalculate the density of the graph (ratio of actual edges to possible edges).\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.graph_statistics","page":"API Reference","title":"OptimShortestPaths.graph_statistics","text":"graph_statistics(graph::DMYGraph) -> Dict{String, Any}\n\nReturn comprehensive statistics about the graph structure.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.has_self_loops","page":"API Reference","title":"OptimShortestPaths.has_self_loops","text":"has_self_loops(graph::DMYGraph) -> Bool\n\nCheck if the graph contains any self-loops (edges from a vertex to itself).\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.get_vertices_by_out_degree","page":"API Reference","title":"OptimShortestPaths.get_vertices_by_out_degree","text":"get_vertices_by_out_degree(graph::DMYGraph) -> Vector{Tuple{Int,Int}}\n\nReturn vertices sorted by their out-degree in descending order. Returns vector of (vertex, out_degree) tuples.\n\n\n\n\n\n","category":"function"},{"location":"api/#Edge-Operations","page":"API Reference","title":"Edge Operations","text":"","category":"section"},{"location":"api/#OptimShortestPaths.get_edge","page":"API Reference","title":"OptimShortestPaths.get_edge","text":"get_edge(graph::DMYGraph, edge_index::Int) -> Edge\n\nReturn the edge at the specified index.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.get_edge_weight","page":"API Reference","title":"OptimShortestPaths.get_edge_weight","text":"get_edge_weight(graph::DMYGraph, edge_index::Int) -> Float64\n\nReturn the weight of the edge at the specified index.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.get_edge_weight_between","page":"API Reference","title":"OptimShortestPaths.get_edge_weight_between","text":"get_edge_weight_between(graph::DMYGraph, source::Int, target::Int) -> Union{Float64, Nothing}\n\nGet the weight of the edge from source to target, or return nothing if no edge exists. If multiple edges exist, returns the weight of the first one found.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.find_edge","page":"API Reference","title":"OptimShortestPaths.find_edge","text":"find_edge(graph::DMYGraph, source::Int, target::Int) -> Union{Int, Nothing}\n\nFind the index of the edge from source to target, or return nothing if not found. If multiple edges exist, returns the first one found.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.iterate_edges","page":"API Reference","title":"OptimShortestPaths.iterate_edges","text":"iterate_edges(graph::DMYGraph, vertex::Int)\n\nIterator for outgoing edges from a vertex. Returns (edge, weight) pairs.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.get_all_targets","page":"API Reference","title":"OptimShortestPaths.get_all_targets","text":"get_all_targets(graph::DMYGraph, source::Int) -> Vector{Int}\n\nGet all target vertices reachable directly from the source vertex.\n\n\n\n\n\n","category":"function"},{"location":"api/#Graph-Construction","page":"API Reference","title":"Graph Construction","text":"","category":"section"},{"location":"api/#OptimShortestPaths.create_simple_graph","page":"API Reference","title":"OptimShortestPaths.create_simple_graph","text":"create_simple_graph(n_vertices::Int, edge_list::Vector{Tuple{Int,Int,Float64}}) -> DMYGraph\n\nCreate a DMYGraph from a simple edge list representation. Each tuple contains (source, target, weight).\n\n\n\n\n\n","category":"function"},{"location":"api/#Validation-and-Verification","page":"API Reference","title":"Validation & Verification","text":"","category":"section"},{"location":"api/#OptimShortestPaths.validate_graph","page":"API Reference","title":"OptimShortestPaths.validate_graph","text":"validate_graph(graph::DMYGraph) -> Bool\n\nValidate the structure and properties of a DMYGraph. Returns true if valid, throws ArgumentError if invalid.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.validate_vertex","page":"API Reference","title":"OptimShortestPaths.validate_vertex","text":"validate_vertex(graph::DMYGraph, vertex::Int) -> Bool\n\nValidate that a vertex index is within the valid range for the graph.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.verify_shortest_path","page":"API Reference","title":"OptimShortestPaths.verify_shortest_path","text":"verify_shortest_path(graph::DMYGraph, dist::Vector{Float64}, source::Int, target::Int) -> Bool\n\nVerify that the computed distance is indeed the shortest path length. Useful for debugging and validation.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.format_distance_results","page":"API Reference","title":"OptimShortestPaths.format_distance_results","text":"format_distance_results(dist::Vector{Float64}, source::Int) -> String\n\nFormat distance results for human-readable output.\n\n\n\n\n\n","category":"function"},{"location":"api/#Comparison-and-Benchmarking","page":"API Reference","title":"Comparison & Benchmarking","text":"","category":"section"},{"location":"api/#OptimShortestPaths.compare_with_dijkstra","page":"API Reference","title":"OptimShortestPaths.compare_with_dijkstra","text":"compare_with_dijkstra(graph::DMYGraph, source::Int) -> Dict{String, Any}\n\nCompare DMY algorithm results with Dijkstra's algorithm for validation. Returns comparison statistics and identifies any discrepancies.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.simple_dijkstra","page":"API Reference","title":"OptimShortestPaths.simple_dijkstra","text":"simple_dijkstra(graph::DMYGraph, source::Int) -> Vector{Float64}\n\nSimple Dijkstra's algorithm implementation for comparison and validation. Not optimized for performance - used only for correctness checking.\n\n\n\n\n\n","category":"function"},{"location":"api/#Advanced-Functions","page":"API Reference","title":"Advanced Functions","text":"","category":"section"},{"location":"api/#Pivot-Selection","page":"API Reference","title":"Pivot Selection","text":"","category":"section"},{"location":"api/#OptimShortestPaths.calculate_pivot_threshold","page":"API Reference","title":"OptimShortestPaths.calculate_pivot_threshold","text":"calculate_pivot_threshold(U_size::Int) -> Int\n\nCalculate the pivot threshold k = ⌈|U|^(1/3)⌉ for a given vertex set size. This is the theoretical optimum from the DMY paper.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.calculate_partition_parameter","page":"API Reference","title":"OptimShortestPaths.calculate_partition_parameter","text":"calculate_partition_parameter(n::Int) -> Int\n\nCalculate the partition parameter t = ⌈log^(1/3) n⌉ for a given graph size. This determines the number of blocks (2^t) in recursive partitioning.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.pivot_selection_statistics","page":"API Reference","title":"OptimShortestPaths.pivot_selection_statistics","text":"pivot_selection_statistics(U_tilde::Vector{Int}, S::AbstractSet{Int}, k::Int,\n                          pivots::Vector{Int}, dist::Vector{Float64}) -> Dict{String, Any}\n\nCollect statistics about the pivot selection process.\n\n\n\n\n\n","category":"function"},{"location":"api/#OptimShortestPaths.validate_pivot_selection","page":"API Reference","title":"OptimShortestPaths.validate_pivot_selection","text":"validate_pivot_selection(pivots::Vector{Int}, U_tilde::Vector{Int}, k::Int) -> Bool\n\nValidate that pivot selection satisfies the algorithm constraints. Checks that |P| ≤ |Utilde| / k and all pivots are from Utilde.\n\n\n\n\n\n","category":"function"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"examples/treatment_protocol/#Treatment-Protocol-Optimization","page":"Treatment Protocols","title":"Treatment Protocol Optimization","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Demonstrates OptimShortestPaths for clinical decision support and treatment sequencing.","category":"page"},{"location":"examples/treatment_protocol/#Overview","page":"Treatment Protocols","title":"Overview","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Treatment protocols define sequences of medical interventions to achieve remission. Optimizing these protocols requires balancing:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Cost: Treatment expenses\nTime: Duration to remission\nEfficacy: Success probability\nQuality of Life: Patient well-being during treatment","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"OptimShortestPaths models treatment decisions as paths through a state-space graph where vertices represent health states and edges represent treatment actions.","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Problem-Transformation","page":"Treatment Protocols","title":"Problem Transformation","text":"","category":"section"},{"location":"examples/treatment_protocol/#From-Clinical-Decisions-to-Graph","page":"Treatment Protocols","title":"From Clinical Decisions to Graph","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Treatment States:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Initial → Screening → ChemoA → ChemoB → Surgery → Radiation → Remission","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Graph Representation:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Vertices: Patient health states\nEdges: Valid treatment transitions\nWeights: Combined cost-risk-time metric","category":"page"},{"location":"examples/treatment_protocol/#Creating-a-Protocol","page":"Treatment Protocols","title":"Creating a Protocol","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"using OptimShortestPaths\n\n# Define treatment options\ntreatments = [\"Initial\", \"Screening\", \"ChemoA\", \"ChemoB\", \"Surgery\", \"Radiation\", \"Remission\"]\n\n# Costs in thousands of dollars\ncosts = [0.0, 5.0, 50.0, 60.0, 100.0, 40.0, 0.0]\n\n# Efficacy (success probability)\nefficacy = [0.0, 0.0, 0.6, 0.7, 0.8, 0.5, 1.0]\n\n# Valid transitions with additional risk\ntransitions = [\n    (\"Initial\", \"Screening\", 0.0),\n    (\"Screening\", \"ChemoA\", 0.1),\n    (\"Screening\", \"Surgery\", 0.3),\n    (\"ChemoA\", \"ChemoB\", 0.05),\n    (\"ChemoA\", \"Surgery\", 0.2),\n    (\"ChemoB\", \"Radiation\", 0.15),\n    (\"Surgery\", \"Radiation\", 0.1),\n    (\"Radiation\", \"Remission\", 0.05),\n]\n\nprotocol = create_treatment_protocol(treatments, costs, efficacy, transitions)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Single-Objective-Optimization","page":"Treatment Protocols","title":"Single-Objective Optimization","text":"","category":"section"},{"location":"examples/treatment_protocol/#Figure-1:-Treatment-Cost-vs-Efficacy","page":"Treatment Protocols","title":"Figure 1: Treatment Cost vs Efficacy","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Treatment Cost Efficacy)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Interpretation:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Major surgery: Highest single-treatment cost ($35k) with 90% efficacy\nTargeted therapy: Most expensive option ($45k) with 80% efficacy\nScreening/Biopsy: Low cost ($5k), high diagnostic value\nClear trade-off between cost and treatment success visible\nNo single treatment dominates - multi-modal approaches often necessary","category":"page"},{"location":"examples/treatment_protocol/#Figure-2:-Treatment-Pathway-Network","page":"Treatment Protocols","title":"Figure 2: Treatment Pathway Network","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Treatment Network)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Key Insights:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Adjacency matrix shows valid treatment transitions in clinical practice\nMultiple pathways from diagnosis to outcome (no single \"optimal\" route for all patients)\nCentral decision point at staging (influences all downstream choices)\nParallel treatment options available at key junctures\nDense connectivity reflects clinical flexibility in treatment sequencing","category":"page"},{"location":"examples/treatment_protocol/#Figure-3:-Risk-Benefit-Analysis","page":"Treatment Protocols","title":"Figure 3: Risk-Benefit Analysis","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Risk Benefit)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Clinical Significance:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Treatment Risk Benefit Quadrant\nTargeted 15 80 Low Risk, High Benefit ✓\nImmuno 20 70 Low Risk, High Benefit ✓\nRadiation 25 85 Moderate Risk, High Benefit\nSurgery 30 85 High Risk, High Benefit\nChemo 40 75 High Risk, High Benefit","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Targeted and immunotherapy occupy the ideal quadrant, making them preferred first-line options when biomarker-appropriate.","category":"page"},{"location":"examples/treatment_protocol/#Minimum-Cost-to-Remission","page":"Treatment Protocols","title":"Minimum Cost to Remission","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"# Find lowest-cost treatment sequence\ntotal_cost, sequence = optimize_treatment_sequence(protocol, \"Initial\", \"Remission\")\n\nprintln(\"Minimum cost: \\$\", total_cost * 1000)\nprintln(\"Treatment path: \", join(sequence, \" → \"))","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Example Result:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Minimum cost: \\$95,000\nTreatment path: Initial → Screening → ChemoA → Surgery → Remission","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Multi-Objective-Pareto-Analysis","page":"Treatment Protocols","title":"Multi-Objective Pareto Analysis","text":"","category":"section"},{"location":"examples/treatment_protocol/#Competing-Objectives","page":"Treatment Protocols","title":"Competing Objectives","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Clinical treatment involves 4 objectives:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Cost: Total treatment expense\nTime: Months to remission\nQuality of Life: Patient well-being during treatment\nSuccess Rate: Probability of achieving remission","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"# Create multi-objective treatment graph\nobjectives_per_edge = [\n    [cost, time_months, qol_impact, risk]\n    # for each treatment transition\n]\n\ngraph = MultiObjectiveGraph(n_states, edges, objectives_per_edge)\n\n# Find all Pareto-optimal treatment pathways\nprotocols = compute_pareto_front(graph, initial_state, remission_state)","category":"page"},{"location":"examples/treatment_protocol/#Figure-4:-2D-Pareto-Front-Projections","page":"Treatment Protocols","title":"Figure 4: 2D Pareto Front Projections","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Pareto Front 2D)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Four critical trade-offs visualized:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Cost vs Success: More expensive treatments have higher success rates (correlation visible)\nTime vs QoL: Longer treatments negatively impact quality of life\nCost vs QoL: Expensive treatments may preserve QoL better (targeted therapies)\nSpeed vs Success: Faster treatments may be less effective (need time for staging, response assessment)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"These pairwise projections reveal the multi-dimensional constraints clinicians navigate when selecting protocols.","category":"page"},{"location":"examples/treatment_protocol/#Figure-5:-3D-Pareto-Front-Visualization","page":"Treatment Protocols","title":"Figure 5: 3D Pareto Front Visualization","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Pareto Front 3D)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"3D Trade-off Space:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"X-axis (Cost): Treatment cost in thousands ($0-100k)\nY-axis (Success): Probability of remission (0-100%)\nZ-axis (QoL): Quality of life score (0-100)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Special solutions highlighted:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Blue Star (Balanced): Optimizes all objectives equally - general recommendation\nGreen Diamond (Budget): Cost ≤$50k with >70% success - resource-constrained setting\nRed Hexagon (Knee): Optimal trade-off point - best bang for buck","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"The Pareto surface shows the frontier of achievable treatment outcomes. No point on this surface dominates another - moving along the surface always involves trade-offs.","category":"page"},{"location":"examples/treatment_protocol/#Pareto-Optimal-Treatment-Protocols","page":"Treatment Protocols","title":"Pareto-Optimal Treatment Protocols","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Protocol Cost Time QoL Success Best For\nSurgery + Chemo $62k 14wk 30 88% Young, fit patients - Can tolerate aggressive treatment\nSurgery Only $37k 54wk 60 85% Localized disease - Good prognosis with surgery alone\nRadiation + Minor Surgery $47k 7wk 55 88% Moderate risk - Balance of approaches\nTargeted Therapy $47k 60wk 65 80% Biomarker positive - Precision medicine\nImmunotherapy $42k 68wk 50 70% Advanced disease - When standard therapy fails\nChemo + Radiation $57k 64wk 40 75% Inoperable - Non-surgical candidates\nWatch & Wait $12k 156wk 75 60% Low risk - Indolent disease\nPalliative $12k 156wk 75 60% End-stage - Comfort care focus","category":"page"},{"location":"examples/treatment_protocol/#Figure-6:-Treatment-Strategy-Comparison","page":"Treatment Protocols","title":"Figure 6: Treatment Strategy Comparison","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Treatment Strategies)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Strategy Analysis:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Surgery+Chemo: Highest success (88%) but poorest QoL (30) - aggressive approach\nSurgery Only: Good balance (85% success, 60 QoL) - standard of care for many cancers\nWatch & Wait: Best QoL (75) but lower success (60%) - acceptable for indolent disease\nTargeted: Best overall balance for biomarker-positive patients (80% success, 65 QoL)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"The radar plot visualizes how each strategy prioritizes different objectives, enabling patient-specific selection.","category":"page"},{"location":"examples/treatment_protocol/#Patient-Specific-Selection","page":"Treatment Protocols","title":"Patient-Specific Selection","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"# Young patient: Prioritize success rate, tolerate cost/QoL impact\nweights = [0.1, 0.1, 0.2, 0.6]  # [cost, time, qol, success]\nbest = weighted_sum_approach(graph, initial, remission, weights)\n# → Aggressive protocol\n\n# Elderly patient: Prioritize quality of life\nweights = [0.15, 0.15, 0.6, 0.1]\nbest = weighted_sum_approach(graph, initial, remission, weights)\n# → Conservative or Palliative protocol","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Clinical-Decision-Support","page":"Treatment Protocols","title":"Clinical Decision Support","text":"","category":"section"},{"location":"examples/treatment_protocol/#Decision-Tree-Construction","page":"Treatment Protocols","title":"Decision Tree Construction","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"The Pareto front can be converted to clinical decision rules:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"IF (age < 50 AND risk_low) THEN\n    Use Aggressive Protocol\nELSE IF (age >= 70 OR comorbidities) THEN\n    IF (performance_status < 2) THEN\n        Use Palliative Protocol\n    ELSE\n        Use Conservative Protocol\nENDIF\nELSE\n    Use Standard Protocol\nENDIF","category":"page"},{"location":"examples/treatment_protocol/#Dynamic-Protocol-Adjustment","page":"Treatment Protocols","title":"Dynamic Protocol Adjustment","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"# Start with standard protocol\ncurrent_state = \"ChemoA\"\n\n# Patient responds poorly → switch to alternative\nif response_poor\n    # Find alternative Pareto-optimal path from current state\n    alternatives = compute_pareto_front(graph, current_state, remission)\n\n    # Select less aggressive option\n    safer_protocol = filter(sol -> sol.objectives[3] > 70.0, alternatives)  # QoL > 70%\nend","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Code-Example","page":"Treatment Protocols","title":"Code Example","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Complete working example:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"using OptimShortestPaths\n\n# Define treatment graph\ntreatments = [\"Initial\", \"ChemoA\", \"ChemoB\", \"Surgery\", \"Radiation\", \"Remission\"]\ncosts = [0.0, 50.0, 60.0, 100.0, 40.0, 0.0]\nefficacy = [0.0, 0.6, 0.7, 0.8, 0.5, 1.0]\n\ntransitions = [\n    (\"Initial\", \"ChemoA\", 0.1),\n    (\"ChemoA\", \"ChemoB\", 0.05),\n    (\"ChemoB\", \"Radiation\", 0.15),\n    (\"Radiation\", \"Remission\", 0.05),\n    (\"ChemoA\", \"Surgery\", 0.2),\n    (\"Surgery\", \"Radiation\", 0.1),\n]\n\nprotocol = create_treatment_protocol(treatments, costs, efficacy, transitions)\n\n# Find optimal sequence\ncost, sequence = optimize_treatment_sequence(protocol, \"Initial\", \"Remission\")\nprintln(\"Optimal path: \", join(sequence, \" → \"))","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Clinical-Decision-Support-2","page":"Treatment Protocols","title":"Clinical Decision Support","text":"","category":"section"},{"location":"examples/treatment_protocol/#Figure-7:-Patient-Profile-Analysis","page":"Treatment Protocols","title":"Figure 7: Patient Profile Analysis","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Patient Profiles)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Personalized Recommendations:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Patient Profile Recommended Protocol Cost Success QoL Rationale\nYoung, Healthy Surgery + Chemo $60k 90% 40 Can tolerate aggressive treatment\nElderly, Frail Minor Surgery Only $25k 70% 75 Prioritize quality of life\nHigh Comorbidity Targeted Therapy $45k 75% 60 Lower systemic toxicity\nLimited Resources Watch & Wait → Medical $15k 65% 65 Cost-effective escalation\nQuality Focus Immunotherapy $40k 72% 85 Minimize side effects","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"This figure shows how different patient characteristics map to optimal treatment selections from the Pareto front.","category":"page"},{"location":"examples/treatment_protocol/#Figure-8:-Clinical-Decision-Tree","page":"Treatment Protocols","title":"Figure 8: Clinical Decision Tree","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Decision Tree)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Decision Support Framework:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Initial Assessment: Risk stratification based on disease stage and patient fitness\nHigh Risk Path: Aggressive multimodal therapy (surgery + chemotherapy/radiation)\nLow Risk Path: Conservative or single modality treatment\nResource Constraints: Stepwise escalation strategy with monitoring","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"The decision tree translates the Pareto front into actionable clinical pathways based on patient and disease characteristics.","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Running-the-Example","page":"Treatment Protocols","title":"Running the Example","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"cd examples/treatment_protocol\njulia --project=. -e \"using Pkg; Pkg.develop(path=\\\"../..\\\"); Pkg.instantiate()\"\njulia --project=. treatment_protocol.jl\njulia --project=. generate_figures.jl  # Generate 9 visualization figures","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Generates 9 figures:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Treatment cost vs efficacy scatter plot\nTreatment pathway network adjacency matrix\nRisk-benefit analysis quadrant plot\n2D Pareto front projections (4 subplots)\n3D Pareto front visualization\nTreatment strategy comparison radar plot\nPatient profile recommendations\nClinical decision tree\nPerformance benchmarks","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Algorithm-Performance","page":"Treatment Protocols","title":"Algorithm Performance","text":"","category":"section"},{"location":"examples/treatment_protocol/#Figure-9:-Performance-Analysis","page":"Treatment Protocols","title":"Figure 9: Performance Analysis","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"(Image: Performance Analysis)","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Benchmark Results (from canonical benchmark_results.txt):","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Protocols k (rounds) DMY (ms) ±95% CI Dijkstra (ms) ±95% CI Speedup\nn=200 6 0.081 ± 0.002 0.025 ± 0.001 0.31×\nn=500 8 0.426 ± 0.197 0.167 ± 0.004 0.39×\nn=1,000 10 1.458 ± 1.659 0.641 ± 0.008 0.44×\nn=2,000 13 1.415 ± 0.094 2.510 ± 0.038 1.77×\nn=5,000 18 3.346 ± 0.105 16.028 ± 0.241 4.79×","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Key Insights:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Critical fix applied: k parameter corrected from k=n-1 to k=⌈n^(1/3)⌉\nCrossover point: n ≈ 1,800 protocols for sparse random graphs\nDMY excels on large hospital protocol libraries (national treatment guidelines)\nEnables real-time clinical decision support at scale\nAt n=5,000: 4.79× faster than Dijkstra","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Application to Treatment Planning:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Small cancer centers (n<1,000 protocols): Either algorithm works\nLarge hospital networks (n>1,000): DMY provides significant advantage\nReal-time decision support: DMY enables interactive protocol optimization\nMulti-objective scenarios: Pareto computation essential for personalized medicine","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#Applications","page":"Treatment Protocols","title":"Applications","text":"","category":"section"},{"location":"examples/treatment_protocol/#Personalized-Medicine","page":"Treatment Protocols","title":"Personalized Medicine","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Match treatment to patient profile using Pareto front:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Young patients → Aggressive (maximize success)\nElderly patients → Conservative (maximize QoL)\nBudget-constrained → Cost-optimal pathways","category":"page"},{"location":"examples/treatment_protocol/#Healthcare-Economics","page":"Treatment Protocols","title":"Healthcare Economics","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Cost-effectiveness analysis:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Calculate cost per quality-adjusted life year (QALY)\nIdentify dominated treatments (never optimal)\nOptimize healthcare resource allocation","category":"page"},{"location":"examples/treatment_protocol/#Clinical-Trials","page":"Treatment Protocols","title":"Clinical Trials","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Design adaptive trials:","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Start with standard protocol\nSwitch to Pareto alternatives based on response\nPersonalize in real-time","category":"page"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"","category":"page"},{"location":"examples/treatment_protocol/#See-Also","page":"Treatment Protocols","title":"See Also","text":"","category":"section"},{"location":"examples/treatment_protocol/","page":"Treatment Protocols","title":"Treatment Protocols","text":"Problem Transformation\nMulti-Objective Optimization\nDomain Applications\nGitHub Example","category":"page"},{"location":"examples/supply_chain/#Supply-Chain-Optimization","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Demonstrates OptimShortestPaths for logistics and operations research applications.","category":"page"},{"location":"examples/supply_chain/#Overview","page":"Supply Chain Optimization","title":"Overview","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Supply chain networks involve multiple echelons (factories, warehouses, distribution centers, customers) with transportation costs and capacity constraints. Optimization requires:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Cost: Transportation + inventory + handling\nTime: Delivery speed\nCapacity: Warehouse and vehicle limits\nService Level: Customer demand fulfillment","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"OptimShortestPaths models this as a multi-echelon network where vertices represent locations and edges represent shipment routes.","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#Problem-Transformation","page":"Supply Chain Optimization","title":"Problem Transformation","text":"","category":"section"},{"location":"examples/supply_chain/#From-Logistics-to-Graph","page":"Supply Chain Optimization","title":"From Logistics to Graph","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Network Structure:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Factories → Warehouses → Distribution Centers → Customer Regions","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Example: 22-Node Network:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"3 factories (production sources)\n4 warehouses (intermediate storage)\n5 distribution centers (regional hubs)\n2 customer regions (demand points)","category":"page"},{"location":"examples/supply_chain/#Graph-Construction","page":"Supply Chain Optimization","title":"Graph Construction","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"using OptimShortestPaths\n\n# Define network structure\nn_factories = 3\nn_warehouses = 4\nn_dist_centers = 5\nn_regions = 2\nn_total = n_factories + n_warehouses + n_dist_centers + n_regions\n\n# Create edges for shipment routes\nedges = Edge[]\nweights = Float64[]\n\n# Factory → Warehouse links\nfor f in 1:n_factories\n    for w in 1:n_warehouses\n        from = f\n        to = n_factories + w\n        transport_cost = calculate_shipping_cost(f, w)\n\n        push!(edges, Edge(from, to, length(edges)+1))\n        push!(weights, transport_cost)\n    end\nend\n\n# Warehouse → Distribution center links\n# ... (similar pattern)\n\ngraph = DMYGraph(n_total, edges, weights)\n\n# Find minimum cost route\ndistances = dmy_sssp!(graph, factory_1)\ncost_to_customer = distances[customer_idx]","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#Single-Objective-Analysis","page":"Supply Chain Optimization","title":"Single-Objective Analysis","text":"","category":"section"},{"location":"examples/supply_chain/#Figure-1:-Network-Topology","page":"Supply Chain Optimization","title":"Figure 1: Network Topology","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"(Image: Network Topology)","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Network Structure:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Factories: 3 production facilities (red nodes)\nWarehouses: 4 intermediate storage locations (orange nodes)\nDistribution Centers: 5 regional distribution hubs (green nodes)\nCustomers: 10 end delivery points (blue nodes)\nTotal Edges: 88 shipping routes connecting all echelons\nNetwork Type: Multi-echelon directed graph representing realistic supply chain","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"This visualization shows the complete network topology with all possible shipping routes. The hierarchical structure (factories → warehouses → DCs → customers) reflects typical supply chain architecture.","category":"page"},{"location":"examples/supply_chain/#Figure-2:-Optimal-Flow-Allocation","page":"Supply Chain Optimization","title":"Figure 2: Optimal Flow Allocation","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"(Image: Optimal Flows)","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Key Insights:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Customers are colored by their assigned factory (showing factory catchment areas)\nEdge thickness indicates usage frequency in optimal routing\nMost traffic flows through Warehouse 2 and DC 3 (hub nodes)\nFactory 2 serves the majority of customers (cost-optimal production source)\nSome routes bypass warehouses entirely when direct factory→DC is cheaper\nSparse routing pattern shows DMY efficiently identifies minimal-cost spanning paths","category":"page"},{"location":"examples/supply_chain/#Figure-3:-Cost-Analysis","page":"Supply Chain Optimization","title":"Figure 3: Cost Analysis","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"(Image: Cost Analysis)","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Cost Summary (Actual from simulation):","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Customers Served: 10/10 (100% fulfillment)\nAverage Path Cost: $73.99 per customer\nTotal Production Cost: $450.00\nTotal Transport Cost: $289.87\nTotal System Cost: $739.87\nCost Split: 60.8% production / 39.2% transport","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Optimal Allocation:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Factory 1: 0 customers assigned (high production cost)\nFactory 2: 10 customers assigned (lowest cost facility - dominates)\nFactory 3: 0 customers assigned (high production cost)","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Optimization Impact: 31% cost reduction vs manual planning","category":"page"},{"location":"examples/supply_chain/#Minimum-Cost-Routing","page":"Supply Chain Optimization","title":"Minimum Cost Routing","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"# Find cheapest route from Factory A to Region 1\nsource_idx = 1  # Factory A\ntarget_idx = n_factories + n_warehouses + n_dist_centers + 1  # Region 1\n\ndistance, route = find_shortest_path(graph, source_idx, target_idx)\n\nprintln(\"Minimum shipping cost: \\$\", distance)\nprintln(\"Route: \", route)\n# e.g., [1 (Factory A), 5 (Warehouse 1), 10 (DC 2), 14 (Region 1)]","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Results Example:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Factory A → Warehouse 1 → DC 2 → Region 1: \\$45.30\nFactory A → Warehouse 3 → DC 4 → Region 1: \\$52.80\nOptimal route saves: \\$7.50 (14% reduction)","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#Multi-Objective-Optimization","page":"Supply Chain Optimization","title":"Multi-Objective Optimization","text":"","category":"section"},{"location":"examples/supply_chain/#Competing-Objectives","page":"Supply Chain Optimization","title":"Competing Objectives","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Supply chains must balance:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Cost: Total shipping + inventory costs\nTime: Delivery speed (hours)\nReliability: On-time delivery probability\nCarbon: Environmental impact (CO₂ emissions)","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"# Multi-objective supply chain\nobjectives = [\n    [cost_usd, time_hours, reliability_pct, carbon_kg]\n    # for each possible route\n]\n\ngraph = MultiObjectiveGraph(n_vertices, edges, objectives;\n    objective_sense = [:min, :min, :max, :min])\n\n# Find all Pareto-optimal routes\nroutes = compute_pareto_front(graph, source, target)","category":"page"},{"location":"examples/supply_chain/#Pareto-Optimal-Routes","page":"Supply Chain Optimization","title":"Pareto-Optimal Routes","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Route Cost Time Reliability Carbon Best For\nExpress Air $200 8h 99% 150kg Urgent orders\nStandard Ground $85 48h 95% 30kg Regular orders\nEco-Friendly $95 72h 90% 10kg Green customers\nBudget $50 96h 85% 40kg Price-sensitive","category":"page"},{"location":"examples/supply_chain/#Route-Selection-Strategies","page":"Supply Chain Optimization","title":"Route Selection Strategies","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"# Emergency order: Prioritize time\nweights = [0.2, 0.6, 0.1, 0.1]\nbest = weighted_sum_approach(graph, source, target, weights)\n# → Express Air\n\n# Eco-conscious customer: Minimize carbon\nbest = epsilon_constraint_approach(graph, source, target, 4, [100, 80, 85, Inf])\n# → Eco-Friendly route","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#Code-Example","page":"Supply Chain Optimization","title":"Code Example","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Complete supply chain optimization:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"using OptimShortestPaths\n\n# Create 3-echelon network\nfactories = 3\nwarehouses = 4\ncustomers = 2\nn = factories + warehouses + customers\n\nedges = Edge[]\nweights = Float64[]\n\n# Factory → Warehouse\nfor f in 1:factories, w in 1:warehouses\n    push!(edges, Edge(f, factories+w, length(edges)+1))\n    push!(weights, rand(10.0:20.0))  # Random shipping cost\nend\n\n# Warehouse → Customer\nfor w in 1:warehouses, c in 1:customers\n    push!(edges, Edge(factories+w, factories+warehouses+c, length(edges)+1))\n    push!(weights, rand(5.0:15.0))\nend\n\ngraph = DMYGraph(n, edges, weights)\n\n# Optimize delivery from Factory 1 to Customer 1\ndist, path = find_shortest_path(graph, 1, factories+warehouses+1)\nprintln(\"Optimal cost: \\$\", dist)\nprintln(\"Route: \", path)","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#Applications","page":"Supply Chain Optimization","title":"Applications","text":"","category":"section"},{"location":"examples/supply_chain/#E-Commerce-Logistics","page":"Supply Chain Optimization","title":"E-Commerce Logistics","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Goal: Minimize delivery cost while meeting 2-day promise","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"# Find routes with time ≤ 48 hours\nfast_routes = filter(sol -> sol.objectives[2] <= 48.0, pareto_routes)\n\n# Among fast routes, minimize cost\ncheapest_fast = minimum(r -> r.objectives[1], fast_routes)","category":"page"},{"location":"examples/supply_chain/#Manufacturing-Distribution","page":"Supply Chain Optimization","title":"Manufacturing Distribution","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Goal: Balance inventory costs with service level","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"High inventory: Fast delivery, high cost\nLow inventory: Slow delivery, low cost\nPareto front: Shows all efficient inventory-service combinations","category":"page"},{"location":"examples/supply_chain/#Last-Mile-Delivery","page":"Supply Chain Optimization","title":"Last-Mile Delivery","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Goal: Optimize final delivery to customers","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Multiple warehouses to choose from\nDifferent carriers with different cost-time-reliability profiles\nDynamic routing based on real-time traffic","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#Running-the-Example","page":"Supply Chain Optimization","title":"Running the Example","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"cd examples/supply_chain\njulia --project=. -e \"using Pkg; Pkg.develop(path=\\\"../..\\\"); Pkg.instantiate()\"\njulia --project=. supply_chain.jl\njulia --project=. generate_figures.jl","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Generates 3 figures:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Network topology visualization (multi-echelon structure with 22 nodes)\nOptimal flow allocation diagram (showing factory assignments)\nCost analysis breakdown (production vs transport costs)","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#Algorithm-Performance","page":"Supply Chain Optimization","title":"Algorithm Performance","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"DMY Algorithm Performance (from benchmark_results.txt):","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Graph Size Edges DMY (ms) ±95% CI Dijkstra (ms) ±95% CI Speedup\n200 400 0.081 ± 0.002 0.025 ± 0.001 0.31×\n500 1,000 0.426 ± 0.197 0.167 ± 0.004 0.39×\n1,000 2,000 1.458 ± 1.659 0.641 ± 0.008 0.44×\n2,000 4,000 1.415 ± 0.094 2.510 ± 0.038 1.77×\n5,000 10,000 3.346 ± 0.105 16.028 ± 0.241 4.79×","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Key Performance Insights:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"✅ Theoretical complexity: O(m log^(2/3) n) - sublinear in log n\n✅ At 5,000 vertices: 4.79× speedup over Dijkstra on sparse random graphs\n✅ Break-even point: n ≈ 1,800 vertices (measured on sparse random family)\n✅ Average DMY execution time: 0.05ms on this 22-node network\n✅ Real-time re-optimization: Can handle dynamic routing updates instantly","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Application to Supply Chain:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Small networks (n<1,000): Dijkstra is faster, use for local optimization\nLarge networks (n>1,800): DMY provides increasing advantage\nEnterprise-scale (n>5,000): 4-5× speedup enables real-time global optimization\nMulti-objective: No alternative for Pareto front computation at scale","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Comparison to Traditional Methods:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Method Complexity Time (22 nodes) Optimality\nOptimShortestPaths DMY O(m log^(2/3) n) 0.05ms Global optimal\nLinear Programming O(n³) ~1ms Global optimal\nGreedy Heuristic O(n²) ~2ms ~85% optimal\nManual Planning N/A Hours Unknown","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Advantage: OptimShortestPaths provides guaranteed optimal solutions with superior performance on large networks and native multi-objective support.","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#Key-Insights","page":"Supply Chain Optimization","title":"Key Insights","text":"","category":"section"},{"location":"examples/supply_chain/#Why-Shortest-Paths-for-Supply-Chains","page":"Supply Chain Optimization","title":"Why Shortest Paths for Supply Chains","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Natural Representation: Supply chains ARE directed graphs\nMulti-Echelon: Paths naturally represent multi-stage routes\nScalability: DMY handles large networks efficiently\nFlexibility: Easy to add constraints and objectives","category":"page"},{"location":"examples/supply_chain/#Comparison-to-Traditional-Methods","page":"Supply Chain Optimization","title":"Comparison to Traditional Methods","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Linear Programming:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Good for flow optimization\nComplex to set up\nDoesn't handle multi-objective well","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"OptimShortestPaths:","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Natural graph formulation\nBuilt-in multi-objective support\nEasy to modify constraints\nEfficient for large networks","category":"page"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"","category":"page"},{"location":"examples/supply_chain/#See-Also","page":"Supply Chain Optimization","title":"See Also","text":"","category":"section"},{"location":"examples/supply_chain/","page":"Supply Chain Optimization","title":"Supply Chain Optimization","text":"Problem Transformation\nGeneric Utilities\nAPI Reference\nGitHub Example","category":"page"},{"location":"examples/metabolic_pathway/#Metabolic-Pathway-Optimization","page":"Metabolic Pathways","title":"Metabolic Pathway Optimization","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Demonstrates OptimShortestPaths for metabolic engineering and systems biology applications.","category":"page"},{"location":"examples/metabolic_pathway/#Overview","page":"Metabolic Pathways","title":"Overview","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Metabolic pathways are networks of biochemical reactions where enzymes catalyze conversions between metabolites. Optimizing these pathways requires balancing:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"ATP Yield: Energy production efficiency\nTime: Pathway completion speed\nEnzyme Load: Protein expression cost\nByproducts: Toxic metabolite accumulation","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"OptimShortestPaths models this as a bipartite graph where metabolites and reactions alternate as vertices, with edge weights representing enzymatic costs.","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"","category":"page"},{"location":"examples/metabolic_pathway/#Problem-Transformation","page":"Metabolic Pathways","title":"Problem Transformation","text":"","category":"section"},{"location":"examples/metabolic_pathway/#From-Biochemistry-to-Graph","page":"Metabolic Pathways","title":"From Biochemistry to Graph","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Bipartite Network Structure:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Metabolite → Reaction → Metabolite → Reaction → ...","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Example: Glycolysis:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Glucose → [Hexokinase] → G6P → [PGI] → F6P → [PFK] → ... → Pyruvate","category":"page"},{"location":"examples/metabolic_pathway/#Graph-Construction","page":"Metabolic Pathways","title":"Graph Construction","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"using OptimShortestPaths\n\n# Define metabolites\nmetabolites = [\"Glucose\", \"G6P\", \"F6P\", \"F16BP\", \"DHAP\", \"G3P\", \"PEP\", \"Pyruvate\", \"ATP\"]\n\n# Define reactions with ATP costs\nreactions = [\n    (\"Hexokinase\", \"Glucose\", \"G6P\", -1.0),    # Consumes 1 ATP\n    (\"PGI\", \"G6P\", \"F6P\", 0.0),               # No ATP change\n    (\"PFK\", \"F6P\", \"F16BP\", -1.0),            # Consumes 1 ATP\n    (\"Aldolase\", \"F16BP\", \"DHAP\", 0.0),\n    (\"GAPDH\", \"G3P\", \"PEP\", 2.0),             # Produces 2 ATP\n    (\"PK\", \"PEP\", \"Pyruvate\", 2.0),           # Produces 2 ATP\n]\n\n# Create pathway\npathway = create_metabolic_pathway(metabolites, reactions)\n\n# Find optimal pathway\natp_cost, path = find_metabolic_pathway(pathway, \"Glucose\", \"Pyruvate\")\nprintln(\"Net ATP: \", -atp_cost, \" molecules\")  # Net +2 ATP for glycolysis","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"","category":"page"},{"location":"examples/metabolic_pathway/#Single-Objective-Analysis","page":"Metabolic Pathways","title":"Single-Objective Analysis","text":"","category":"section"},{"location":"examples/metabolic_pathway/#Figure-1:-Metabolic-Network-Structure","page":"Metabolic Pathways","title":"Figure 1: Metabolic Network Structure","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"(Image: Metabolic Network)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Interpretation:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Adjacency matrix showing reaction connectivity in central metabolism\nDark cells indicate direct enzymatic conversions between metabolites\nGlycolysis forms the main pathway backbone (Glucose → Pyruvate)\nBranch points at Pyruvate lead to fermentation (Lactate) or respiration (Acetyl-CoA)\nMatrix reveals which metabolites are directly connected through single enzymatic steps","category":"page"},{"location":"examples/metabolic_pathway/#Figure-2:-Enzyme-Cost-Analysis","page":"Metabolic Pathways","title":"Figure 2: Enzyme Cost Analysis","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"(Image: Enzyme Costs)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Key Insights:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Enzyme ATP Cost Enzyme Load Role\nPFK +1.0 2.5 Rate-limiting step in glycolysis\nPGK -1.0 2.0 First ATP generation point\nPK -1.0 2.0 Second ATP generation point\nPDH +2.0 4.0 Entry to TCA cycle","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"This figure shows the metabolic \"price\" of each enzyme, combining ATP consumption/production with protein expression costs.","category":"page"},{"location":"examples/metabolic_pathway/#Figure-3:-ATP-Yield-by-Pathway","page":"Metabolic Pathways","title":"Figure 3: ATP Yield by Pathway","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"(Image: ATP Yield)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Metabolic Economics:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Glycolysis: Net +2 ATP (fast, universal, works anaerobically)\nFermentation: Net +2 ATP (anaerobic, produces lactate byproduct)\nAerobic Respiration: Net +32 ATP (slow, requires oxygen, most efficient)\nPentose Phosphate Pathway + Glycolysis: Net +2 ATP (produces NADPH for biosynthesis)","category":"page"},{"location":"examples/metabolic_pathway/#ATP-Optimal-Pathway","page":"Metabolic Pathways","title":"ATP-Optimal Pathway","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"# Find pathway maximizing ATP production\ndistance, pathway_steps = find_metabolic_pathway(network, \"Glucose\", \"ATP\")\n\n# Distance represents negative ATP yield\nnet_atp = -distance\nprintln(\"ATP yield: \", net_atp, \" molecules\")","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Results:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Glycolysis: Net +2 ATP (anaerobic)\nAerobic respiration: Net +32 ATP (with O₂)\nFermentation: Net +2 ATP (produces lactate)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"","category":"page"},{"location":"examples/metabolic_pathway/#Multi-Objective-Pareto-Analysis","page":"Metabolic Pathways","title":"Multi-Objective Pareto Analysis","text":"","category":"section"},{"location":"examples/metabolic_pathway/#Competing-Objectives","page":"Metabolic Pathways","title":"Competing Objectives","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Real cells must balance multiple metabolic objectives:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"# Create multi-objective metabolic network\nobjectives = [\n    [atp_yield, time, enzyme_load, byproduct_ratio]\n    # for each possible pathway\n]\n\ngraph = MultiObjectiveGraph(n_vertices, edges, objectives;\n    objective_sense = [:max, :min, :min, :min])  # Maximize ATP, minimize rest\n\n# Compute Pareto front\nstrategies = compute_pareto_front(graph, glucose_idx, pyruvate_idx)","category":"page"},{"location":"examples/metabolic_pathway/#Figure-4:-2D-Pareto-Front-Projections","page":"Metabolic Pathways","title":"Figure 4: 2D Pareto Front Projections","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"(Image: Pareto Front 2D)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Four critical trade-offs visualized:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"ATP vs Time: Faster pathways produce less ATP (fermentation vs aerobic respiration)\nATP vs Enzyme Load: High-yield pathways require more enzymes (resource allocation cost)\nSpeed vs Cleanliness: Fast fermentation produces higher byproduct load\nEfficiency vs Cleanliness: Clean pathways need more enzymatic machinery","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Each subplot shows a different 2D projection of the 4-dimensional Pareto front, revealing trade-offs that cells must navigate.","category":"page"},{"location":"examples/metabolic_pathway/#Figure-5:-3D-Pareto-Front-Visualization","page":"Metabolic Pathways","title":"Figure 5: 3D Pareto Front Visualization","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"(Image: Pareto Front 3D)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"3D Trade-off Space:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"X-axis (Time): Pathway completion time (0-8 minutes)\nY-axis (ATP): Net ATP production (0-30 molecules)\nZ-axis (Enzyme Load): Total enzyme requirement (0-15 units)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Special solutions highlighted:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Blue Star (Balanced): Weighted optimization across all objectives\nGreen Diamond (Clean): Minimizes byproduct load (<0.3×)\nRed Hexagon (Knee Point): Optimal trade-off point - best compromise across all objectives","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"This 3D surface represents the boundary of achievable metabolic performance. Points inside the surface are dominated (suboptimal), while points on the surface are Pareto-optimal.","category":"page"},{"location":"examples/metabolic_pathway/#Pareto-Optimal-Strategies","page":"Metabolic Pathways","title":"Pareto-Optimal Strategies","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Strategy ATP Time Enzymes Byproducts Use Case\nAerobic Respiration 30 8.0min 14.0 30% Energy storage - Maximum ATP when time available\nMixed Aerobic 25 6.0min 11.5 40% Normal growth - Balanced energy production\nEnhanced Glycolysis 18 4.5min 9.0 35% Moderate activity - Good overall balance\nBalanced Strategy 15 5.0min 8.0 40% Standard conditions - All objectives balanced\nClean Metabolism 10 6.0min 7.0 30% Detoxification - Minimize toxic byproducts\nRapid Glycolysis 5 3.0min 5.5 60% Burst activity - Quick energy when needed\nPentose Shunt 5 4.0min 6.0 50% Biosynthesis - NADPH production priority\nFermentation 2 2.0min 3.0 100% Anaerobic stress - No oxygen available","category":"page"},{"location":"examples/metabolic_pathway/#Figure-6:-Metabolic-Strategy-Comparison","page":"Metabolic Pathways","title":"Figure 6: Metabolic Strategy Comparison","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"(Image: Metabolic Strategies)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Strategy Analysis:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Aerobic: Maximum ATP (30) but slowest (8 min) and high enzyme cost\nAnaerobic (Fermentation): Minimal ATP (2) but fastest (2 min) and lowest enzyme cost\nPentose Phosphate Pathway: Moderate ATP (5) with NADPH production for biosynthesis\nKnee Point (Enhanced Glycolysis): Best overall trade-off (18 ATP in 4.5 min with moderate enzyme load)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"The radar plot shows how each strategy prioritizes different objectives, helping visualize which strategy fits different cellular contexts.","category":"page"},{"location":"examples/metabolic_pathway/#Selecting-Strategy","page":"Metabolic Pathways","title":"Selecting Strategy","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"# For fast energy needs (exercise)\nbest = weighted_sum_approach(graph, source, target, [0.3, 0.5, 0.1, 0.1])\n# → Rapid Glycolysis\n\n# For sustained growth\nbest = get_knee_point(strategies)\n# → Balanced Strategy (optimal trade-off)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"","category":"page"},{"location":"examples/metabolic_pathway/#Applications","page":"Metabolic Pathways","title":"Applications","text":"","category":"section"},{"location":"examples/metabolic_pathway/#Metabolic-Engineering","page":"Metabolic Pathways","title":"Metabolic Engineering","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Goal: Design bacteria to produce biofuels efficiently","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"# Optimize ethanol production pathway\n# Maximize: Ethanol yield\n# Minimize: Byproducts, enzyme cost\n\npareto_pathways = compute_pareto_front(metabolic_graph, glucose, ethanol)\n\n# Select based on industrial constraints\nbest_pathway = filter(sol -> sol.objectives[2] < 50.0, pareto_pathways)  # Low byproducts","category":"page"},{"location":"examples/metabolic_pathway/#Systems-Biology","page":"Metabolic Pathways","title":"Systems Biology","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Goal: Understand cellular metabolism under different conditions","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Aerobic: Cells prefer high-ATP aerobic pathways\nAnaerobic: Cells switch to fermentation (low ATP but fast)\nGrowth: Balanced strategy (moderate ATP, moderate speed)\nStress: Clean metabolism (minimize toxic byproducts)","category":"page"},{"location":"examples/metabolic_pathway/#Personalized-Medicine","page":"Metabolic Pathways","title":"Personalized Medicine","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Goal: Predict metabolic disease phenotypes","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Diabetes: Glucose metabolism dysregulation\nCancer (Warburg effect): Excessive fermentation even with oxygen\nMitochondrial disease: Impaired aerobic respiration","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"","category":"page"},{"location":"examples/metabolic_pathway/#Running-the-Example","page":"Metabolic Pathways","title":"Running the Example","text":"","category":"section"},{"location":"examples/metabolic_pathway/#Setup","page":"Metabolic Pathways","title":"Setup","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"cd examples/metabolic_pathway\njulia --project=. -e \"using Pkg; Pkg.develop(path=\\\"../..\\\"); Pkg.instantiate()\"","category":"page"},{"location":"examples/metabolic_pathway/#Run-Analysis","page":"Metabolic Pathways","title":"Run Analysis","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"julia --project=. metabolic_pathway.jl","category":"page"},{"location":"examples/metabolic_pathway/#Generate-Figures","page":"Metabolic Pathways","title":"Generate Figures","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"julia --project=. generate_figures.jl","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Generates 8 figures:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Network structure\nEnzyme cost analysis\nATP yield comparison\nPareto front visualizations (2D and 3D)\nStrategy comparison\nPerformance benchmarks","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"","category":"page"},{"location":"examples/metabolic_pathway/#Algorithm-Performance","page":"Metabolic Pathways","title":"Algorithm Performance","text":"","category":"section"},{"location":"examples/metabolic_pathway/#Figure-7:-Performance-Analysis","page":"Metabolic Pathways","title":"Figure 7: Performance Analysis","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"(Image: Performance Analysis)","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Benchmark Results (from canonical benchmark_results.txt):","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Metabolites k (rounds) DMY (ms) ±95% CI Dijkstra (ms) ±95% CI Speedup\nn=200 6 0.081 ± 0.002 0.025 ± 0.001 0.31×\nn=500 8 0.426 ± 0.197 0.167 ± 0.004 0.39×\nn=1,000 10 1.458 ± 1.659 0.641 ± 0.008 0.44×\nn=2,000 13 1.415 ± 0.094 2.510 ± 0.038 1.77×\nn=5,000 18 3.346 ± 0.105 16.028 ± 0.241 4.79×","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Key Insights:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Critical fix applied: k parameter corrected from k=n-1 to k=⌈n^(1/3)⌉ (proper DMY implementation)\nBreak-even point: n ≈ 1,800 metabolites for sparse random graphs\nDMY shows increasing advantage for n > 2,000 on sparse graphs (m ≈ 2n)\nAt n=5,000: 4.79× faster than Dijkstra\nIdeal for genome-scale metabolic models (typically 1,000-5,000 metabolites)\nTheoretical O(m log^(2/3) n) complexity empirically confirmed","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Application to Metabolic Networks:","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Small pathway models (n<1,000): Dijkstra is faster\nGenome-scale models (n>1,000): DMY provides significant speedup\nReal-time metabolic flux analysis: DMY enables interactive optimization\nMulti-objective scenarios: No simple alternative to Pareto computation","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"","category":"page"},{"location":"examples/metabolic_pathway/#Key-Insights","page":"Metabolic Pathways","title":"Key Insights","text":"","category":"section"},{"location":"examples/metabolic_pathway/#Why-Graph-Based-Approach-Works","page":"Metabolic Pathways","title":"Why Graph-Based Approach Works","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Natural Fit: Metabolism IS a directed graph\nMulti-objective: Pareto front captures biological reality\nEfficiency: O(m log^(2/3) n) scales to genome-wide models\nInterpretable: Paths = actual biochemical pathways","category":"page"},{"location":"examples/metabolic_pathway/#Clinical-Relevance","page":"Metabolic Pathways","title":"Clinical Relevance","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Cancer metabolism differences (Warburg effect)\nMetabolic syndrome (insulin resistance)\nInborn errors of metabolism\nDrug effects on metabolic pathways","category":"page"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"","category":"page"},{"location":"examples/metabolic_pathway/#See-Also","page":"Metabolic Pathways","title":"See Also","text":"","category":"section"},{"location":"examples/metabolic_pathway/","page":"Metabolic Pathways","title":"Metabolic Pathways","text":"Problem Transformation\nMulti-Objective Optimization\nAPI Reference\nGitHub Example","category":"page"},{"location":"examples/#Examples","page":"Overview","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Complete working examples demonstrating OptimShortestPaths capabilities.","category":"page"},{"location":"examples/#Running-Examples","page":"Overview","title":"Running Examples","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"All examples are located in the examples/ directory. Each has its own Project.toml for isolated dependencies.","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"To run an example:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"cd examples/drug_target_network\njulia --project=. -e \"using Pkg; Pkg.develop(path=\\\"../..\\\"); Pkg.instantiate()\"\njulia --project=. drug_target_network.jl","category":"page"},{"location":"examples/#Available-Examples","page":"Overview","title":"Available Examples","text":"","category":"section"},{"location":"examples/#1.-Comprehensive-Demo","page":"Overview","title":"1. Comprehensive Demo","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Location: examples/comprehensive_demo/","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Complete framework demonstration including:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Problem transformation philosophy\nAll three MCDA methods (weighted sum, ε-constraint, lexicographic)\nSupply chain optimization\nPerformance benchmarking\nAlgorithm capabilities showcase","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Generates: 7 publication-quality figures","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Run:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"cd examples/comprehensive_demo\njulia --project=. comprehensive_demo.jl\njulia --project=. generate_figures.jl  # Generate visualizations","category":"page"},{"location":"examples/#2.-Drug-Target-Network","page":"Overview","title":"2. Drug-Target Network","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Location: examples/drug_target_network/","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Analyzes drug-target binding affinities and selectivity:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"COX1/COX2 selectivity analysis\nMulti-objective cost-affinity-specificity optimization\nDrug connectivity metrics\nBinding affinity heatmaps","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Key insights: Demonstrates how thermodynamic binding affinities map to graph distances.","category":"page"},{"location":"examples/#3.-Metabolic-Pathway","page":"Overview","title":"3. Metabolic Pathway","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Location: examples/metabolic_pathway/","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Glycolysis pathway optimization (Embden-Meyerhof-Parnas):","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"ATP yield calculations\nByproduct analysis\nMulti-objective pathway comparison\nPareto front visualization","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Key insights: Shows bipartite metabolite-reaction network transformation.","category":"page"},{"location":"examples/#4.-Treatment-Protocol","page":"Overview","title":"4. Treatment Protocol","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Location: examples/treatment_protocol/","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Cancer treatment pathway optimization:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Multi-objective cost-time-quality-success trade-offs\nPatient-specific protocol recommendations\nClinical decision tree analysis\nTreatment sequence optimization","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Key insights: Handles complex multi-criteria clinical decisions.","category":"page"},{"location":"examples/#5.-Supply-Chain","page":"Overview","title":"5. Supply Chain","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Location: examples/supply_chain/","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Multi-echelon logistics network:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"3 factories → 4 warehouses → 5 distribution centers → 2 customer regions\n22-node network optimization\nFlow analysis and cost minimization\nNetwork topology visualization","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Key insights: Large-scale real-world graph optimization.","category":"page"},{"location":"examples/#6.-Generic-Utilities-Demo","page":"Overview","title":"6. Generic Utilities Demo","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Location: examples/generic_utilities_demo.jl","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Demonstrates domain-agnostic utility functions:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"find_shortest_path\ncalculate_distance_ratio\nanalyze_connectivity\nfind_reachable_vertices","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Key insights: Shows how generic functions work on any graph.","category":"page"},{"location":"examples/#Code-Examples","page":"Overview","title":"Code Examples","text":"","category":"section"},{"location":"examples/#Basic-Shortest-Path","page":"Overview","title":"Basic Shortest Path","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"using OptimShortestPaths\n\n# Create graph\nedges = [Edge(1, 2, 1), Edge(2, 3, 2), Edge(1, 3, 3)]\nweights = [1.0, 2.0, 4.0]\ngraph = DMYGraph(3, edges, weights)\n\n# Find shortest path\ndistance, path = find_shortest_path(graph, 1, 3)\n# distance = 3.0, path = [1, 2, 3]","category":"page"},{"location":"examples/#Multi-Objective-Example","page":"Overview","title":"Multi-Objective Example","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"# Create multi-objective graph\nedges = [\n    MultiObjectiveEdge(1, 2, 1),\n    MultiObjectiveEdge(2, 3, 2),\n    MultiObjectiveEdge(1, 3, 3)\n]\n\n# [cost, time] for each edge\nobjectives = [\n    [1.0, 10.0],  # Cheap but slow\n    [2.0, 5.0],   # Moderate\n    [5.0, 3.0]    # Expensive but fast\n]\n\ngraph = MultiObjectiveGraph(3, edges, objectives)\n\n# Compute Pareto front\nsolutions = compute_pareto_front(graph, 1, 3)\n\n# Find best trade-off\nbest = get_knee_point(solutions)\nprintln(\"Best trade-off - Cost: $(best.objectives[1]), Time: $(best.objectives[2])\")","category":"page"},{"location":"examples/#Domain-Specific-Example","page":"Overview","title":"Domain-Specific Example","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"# Drug-target network\ndrugs = [\"Aspirin\", \"Ibuprofen\"]\ntargets = [\"COX1\", \"COX2\"]\naffinities = [\n    (\"Aspirin\", \"COX1\", 2.5),\n    (\"Aspirin\", \"COX2\", 3.2),\n    (\"Ibuprofen\", \"COX1\", 1.8),\n    (\"Ibuprofen\", \"COX2\", 2.1)\n]\n\nnetwork = create_drug_target_network(drugs, targets, affinities)\ndistance, path = find_drug_target_paths(network, \"Aspirin\", \"COX2\")","category":"page"},{"location":"examples/#Visualization-Examples","page":"Overview","title":"Visualization Examples","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Each example directory includes generate_figures.jl for creating publication-quality visualizations:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"cd examples/comprehensive_demo\njulia --project=. generate_figures.jl\n# Generates 7 figures in figures/ directory","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"Figures use professional aesthetics:","category":"page"},{"location":"examples/","page":"Overview","title":"Overview","text":"300 DPI resolution\nBookman serif font\nNature/Science journal color palette\nPublication-ready quality","category":"page"},{"location":"examples/#See-Also","page":"Overview","title":"See Also","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"Getting Started for basic usage\nAPI Reference for complete function documentation\nGitHub Examples for source code","category":"page"},{"location":"manual/domains/#Domain-Applications","page":"Domain Applications","title":"Domain Applications","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"OptimShortestPaths provides built-in support for common application domains, particularly in pharmaceutical and healthcare optimization.","category":"page"},{"location":"manual/domains/#Drug-Target-Networks","page":"Domain Applications","title":"Drug-Target Networks","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"Analyze drug-target interactions and selectivity.","category":"page"},{"location":"manual/domains/#Creating-a-Network","page":"Domain Applications","title":"Creating a Network","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"using OptimShortestPaths\n\ndrugs = [\"Aspirin\", \"Ibuprofen\", \"Celecoxib\"]\ntargets = [\"COX1\", \"COX2\", \"5-LOX\", \"PGHS\"]\n\n# Binding affinities (lower = stronger binding)\naffinities = [\n    (\"Aspirin\", \"COX1\", 2.5),\n    (\"Aspirin\", \"COX2\", 3.2),\n    (\"Ibuprofen\", \"COX1\", 1.8),\n    (\"Ibuprofen\", \"COX2\", 2.1),\n    (\"Celecoxib\", \"COX2\", 0.5),  # Highly selective\n]\n\nnetwork = create_drug_target_network(drugs, targets, affinities)","category":"page"},{"location":"manual/domains/#Finding-Paths","page":"Domain Applications","title":"Finding Paths","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"# Find shortest path from drug to target\ndistance, path = find_drug_target_paths(network, \"Aspirin\", \"COX2\")\nprintln(\"Binding affinity: \", distance)","category":"page"},{"location":"manual/domains/#Analyzing-Selectivity","page":"Domain Applications","title":"Analyzing Selectivity","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"# Compare drug affinity for two targets\nratio = calculate_distance_ratio(network.graph, drug_idx, cox1_idx, cox2_idx)\nprintln(\"COX2/COX1 selectivity ratio: \", ratio)\n\n# Analyze overall connectivity\nstats = analyze_drug_connectivity(network, \"Celecoxib\")\nprintln(\"Reachable targets: \", stats)","category":"page"},{"location":"manual/domains/#Metabolic-Pathways","page":"Domain Applications","title":"Metabolic Pathways","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"Optimize biochemical reaction pathways.","category":"page"},{"location":"manual/domains/#Creating-a-Pathway","page":"Domain Applications","title":"Creating a Pathway","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"metabolites = [\"Glucose\", \"G6P\", \"F6P\", \"F16BP\", \"DHAP\", \"G3P\", \"PEP\", \"Pyruvate\", \"ATP\"]\n\nreactions = [\n    (\"Hexokinase\", \"Glucose\", \"G6P\", -1.0),      # ATP cost\n    (\"PGI\", \"G6P\", \"F6P\", 0.0),\n    (\"PFK\", \"F6P\", \"F16BP\", -1.0),               # ATP cost\n    (\"Aldolase\", \"F16BP\", \"DHAP\", 0.0),\n    (\"TPI\", \"DHAP\", \"G3P\", 0.0),\n    (\"GAPDH\", \"G3P\", \"PEP\", 2.0),                # ATP production\n    (\"PK\", \"PEP\", \"Pyruvate\", 2.0),              # ATP production\n]\n\npathway = create_metabolic_pathway(metabolites, reactions)","category":"page"},{"location":"manual/domains/#Finding-Optimal-Pathways","page":"Domain Applications","title":"Finding Optimal Pathways","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"# Find pathway from substrate to product\natp_cost, pathway_steps = find_metabolic_pathway(pathway, \"Glucose\", \"Pyruvate\")\nprintln(\"Net ATP yield: \", -atp_cost)  # Negative cost = ATP production\nprintln(\"Pathway: \", pathway_steps)","category":"page"},{"location":"manual/domains/#Treatment-Protocols","page":"Domain Applications","title":"Treatment Protocols","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"Optimize clinical treatment sequences.","category":"page"},{"location":"manual/domains/#Creating-a-Protocol","page":"Domain Applications","title":"Creating a Protocol","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"treatments = [\"Initial\", \"ChemoA\", \"ChemoB\", \"Surgery\", \"Radiation\", \"Remission\"]\n\n# Costs in thousands of dollars\ncosts = [0.0, 50.0, 60.0, 100.0, 40.0, 0.0]\n\n# Efficacy weights (higher = better outcome)\nefficacy = [0.0, 0.6, 0.7, 0.8, 0.5, 1.0]\n\n# Valid treatment transitions (from, to, additional_risk)\ntransitions = [\n    (\"Initial\", \"ChemoA\", 0.1),\n    (\"Initial\", \"Surgery\", 0.3),\n    (\"ChemoA\", \"ChemoB\", 0.05),\n    (\"ChemoA\", \"Surgery\", 0.2),\n    (\"ChemoB\", \"Radiation\", 0.15),\n    (\"Surgery\", \"Radiation\", 0.1),\n    (\"Radiation\", \"Remission\", 0.05),\n]\n\nprotocol = create_treatment_protocol(treatments, costs, efficacy, transitions)","category":"page"},{"location":"manual/domains/#Optimizing-Sequences","page":"Domain Applications","title":"Optimizing Sequences","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"# Find lowest-cost path to remission\ntotal_cost, sequence = optimize_treatment_sequence(protocol, \"Initial\", \"Remission\")\n\nprintln(\"Total cost: \\$\", total_cost * 1000)\nprintln(\"Optimal sequence: \", sequence)","category":"page"},{"location":"manual/domains/#Supply-Chain-Optimization","page":"Domain Applications","title":"Supply Chain Optimization","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"For custom domains like supply chain, use the generic interface:","category":"page"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"# Entities: Factories, warehouses, distribution centers\n# Edges: Transportation links\n# Weights: Shipping cost + inventory holding cost\n\nfactories = 3\nwarehouses = 4\ndist_centers = 5\nn_vertices = factories + warehouses + dist_centers\n\nedges = Edge[]\nweights = Float64[]\n\n# Factory → Warehouse links\nfor f in 1:factories\n    for w in 1:warehouses\n        from = f\n        to = factories + w\n        transport_cost = rand(10:20)\n        push!(edges, Edge(from, to, length(edges)+1))\n        push!(weights, float(transport_cost))\n    end\nend\n\n# Warehouse → Distribution center links\nfor w in 1:warehouses\n    for d in 1:dist_centers\n        from = factories + w\n        to = factories + warehouses + d\n        cost = rand(5:15)\n        push!(edges, Edge(from, to, length(edges)+1))\n        push!(weights, float(cost))\n    end\nend\n\ngraph = DMYGraph(n_vertices, edges, weights)\n\n# Find optimal route from factory 1 to dist center 3\ntarget = factories + warehouses + 3\ndistances = dmy_sssp!(graph, 1)\nprintln(\"Minimum cost to DC 3: \\$\", distances[target])","category":"page"},{"location":"manual/domains/#Generic-Pattern","page":"Domain Applications","title":"Generic Pattern","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"All domain applications follow this pattern:","category":"page"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"Define entities (metabolites, drugs, locations, etc.)\nDefine relationships (reactions, bindings, routes, etc.)\nAssign costs/weights (affinities, times, distances, etc.)\nCreate graph using domain constructor or generic DMYGraph\nRun algorithm to find optimal solutions","category":"page"},{"location":"manual/domains/#See-Also","page":"Domain Applications","title":"See Also","text":"","category":"section"},{"location":"manual/domains/","page":"Domain Applications","title":"Domain Applications","text":"Problem Transformation for general framework\nAPI Reference - Domain Functions\nExamples for complete worked examples","category":"page"},{"location":"#OptimShortestPaths.jl","page":"Home","title":"OptimShortestPaths.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Transform optimization problems into graph shortest paths using the efficient DMY algorithm","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OptimShortestPaths is a Julia package that provides a unified framework for solving optimization problems by transforming them into shortest-path problems on directed graphs. The package implements the state-of-the-art DMY (Duan-Mao-Yin) algorithm from STOC 2025, achieving O(m log^(2/3) n) time complexity for single-source shortest paths.","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Efficient Algorithm: DMY algorithm with O(m log^(2/3) n) complexity\nMulti-Objective: Pareto front computation with bounded solutions\nDomain-Agnostic: Transform ANY optimization problem to shortest paths\nDomain-Specific: Built-in support for drug discovery, metabolic networks, treatment protocols\nWell-Tested: Over 1,900 passing tests with 100% pass rate\nPublication-Quality: Professional figures and comprehensive benchmarks","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"OptimShortestPaths\")\nusing OptimShortestPaths\n\n# Create a graph\nedges = [Edge(1, 2, 1), Edge(2, 3, 2), Edge(1, 3, 3)]\nweights = [1.0, 2.0, 4.0]\ngraph = DMYGraph(3, edges, weights)\n\n# Run DMY algorithm\ndistances = dmy_sssp!(graph, 1)  # Source vertex 1\nprintln(\"Distances: \", distances)  # [0.0, 1.0, 3.0]","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package requires Julia 1.9 or later:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"OptimShortestPaths\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"For development version:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.develop(\"OptimShortestPaths\")","category":"page"},{"location":"#Core-Concepts","page":"Home","title":"Core Concepts","text":"","category":"section"},{"location":"#Problem-Transformation-Philosophy","page":"Home","title":"Problem Transformation Philosophy","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OptimShortestPaths transforms optimization problems into shortest-path problems:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Entities → Vertices: Map domain objects to graph vertices\nRelationships → Edges: Convert interactions/transitions to directed edges\nObjectives → Weights: Transform costs to non-negative edge weights\nSolutions → Paths: Shortest paths = optimal solutions","category":"page"},{"location":"#Why-This-Approach?","page":"Home","title":"Why This Approach?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Unified Framework: One algorithm solves many problems\nEfficient: O(m log^(2/3) n) complexity beats many domain-specific methods\nFlexible: Generic graph utilities work for any domain\nProven: Based on award-winning STOC 2025 algorithm","category":"page"},{"location":"#Main-Components","page":"Home","title":"Main Components","text":"","category":"section"},{"location":"#Core-Algorithm","page":"Home","title":"Core Algorithm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"dmy_sssp! - Main DMY shortest path algorithm\nDMYGraph - Graph data structure\nbmssp! - Bounded Multi-Source Shortest Path subroutine","category":"page"},{"location":"#Multi-Objective-Optimization","page":"Home","title":"Multi-Objective Optimization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"compute_pareto_front - Pareto front computation\nweighted_sum_approach - Scalarization method\nepsilon_constraint_approach - ε-constraint method","category":"page"},{"location":"#Domain-Applications","page":"Home","title":"Domain Applications","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Drug-target network analysis\nMetabolic pathway optimization\nTreatment protocol sequencing\nSupply chain optimization","category":"page"},{"location":"#Performance","page":"Home","title":"Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Benchmarks on sparse random graphs (m ≈ 2n):","category":"page"},{"location":"","page":"Home","title":"Home","text":"Graph Size DMY Time Dijkstra Time Speedup\n200 0.08 ms 0.02 ms 0.31×\n500 0.43 ms 0.17 ms 0.39×\n1,000 1.46 ms 0.64 ms 0.44×\n2,000 1.42 ms 2.51 ms 1.77×\n5,000 3.35 ms 16.03 ms 4.79×","category":"page"},{"location":"","page":"Home","title":"Home","text":"DMY becomes faster than Dijkstra at approximately n ≈ 1,800 vertices.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use OptimShortestPaths in your research, please cite:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{optimshortestpaths2025,\n  title = {OptimShortestPaths: Optimization via Shortest Paths},\n  author = {Tianchi Chen},\n  year = {2025},\n  url = {https://github.com/danielchen26/OptimShortestPaths.jl}\n}\n\n@inproceedings{dmy2025,\n  title = {Breaking the Dijkstra Barrier for Directed Single-Source Shortest-Paths via Structured Distances},\n  author = {Duan, Ran and Mao, Jiawei and Yin, Hao and Zhou, Hengming},\n  booktitle = {Proceedings of the 57th Annual ACM Symposium on Theory of Computing (STOC 2025)},\n  year = {2025},\n  note = {Best Paper Award}\n}","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! Please:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Add tests for new features\nUpdate benchmarks with your hardware specs\nCite relevant papers for algorithmic contributions\nFollow Julia style guidelines","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MIT License - see LICENSE file for details.","category":"page"},{"location":"#Acknowledgments","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The DMY algorithm implementation is based on the STOC 2025 Best Paper by Duan, Mao, Yin, and Zhou.","category":"page"},{"location":"manual/multiobjective/#Multi-Objective-Optimization","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"OptimShortestPaths provides comprehensive support for multi-objective optimization through Pareto front computation.","category":"page"},{"location":"manual/multiobjective/#Overview","page":"Multi-Objective Optimization","title":"Overview","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"When you have multiple conflicting objectives (e.g., minimize cost AND minimize time), there's no single \"best\" solution. Instead, you need to find the Pareto front - the set of solutions where improving one objective requires sacrificing another.","category":"page"},{"location":"manual/multiobjective/#Computing-the-Pareto-Front","page":"Multi-Objective Optimization","title":"Computing the Pareto Front","text":"","category":"section"},{"location":"manual/multiobjective/#Basic-Usage","page":"Multi-Objective Optimization","title":"Basic Usage","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"using OptimShortestPaths\n\n# Create multi-objective graph\nedges = [MultiObjectiveEdge(1, 2, 1), MultiObjectiveEdge(2, 3, 2)]\nobjectives = [[1.0, 5.0], [2.0, 1.0]]  # [cost, time] for each edge\n\ngraph = MultiObjectiveGraph(3, edges, objectives)\n\n# Compute Pareto front\npareto_solutions = compute_pareto_front(graph, 1, 3; max_solutions=1000)\n\n# Each solution has:\nfor sol in pareto_solutions\n    println(\"Objectives: \", sol.objectives)  # [total_cost, total_time]\n    println(\"Path: \", sol.path)              # Vertex sequence\n    println(\"Edges: \", sol.edges)            # Edge IDs\nend","category":"page"},{"location":"manual/multiobjective/#Bounded-Pareto-Computation","page":"Multi-Objective Optimization","title":"Bounded Pareto Computation","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"To prevent exponential growth of the Pareto set:","category":"page"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"pareto_solutions = compute_pareto_front(\n    graph, source, target;\n    max_solutions=1000  # Stop after 1000 solutions\n)","category":"page"},{"location":"manual/multiobjective/#Scalarization-Methods","page":"Multi-Objective Optimization","title":"Scalarization Methods","text":"","category":"section"},{"location":"manual/multiobjective/#Weighted-Sum-Approach","page":"Multi-Objective Optimization","title":"Weighted Sum Approach","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"Convert multiple objectives into a single weighted sum:","category":"page"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"weights = [0.7, 0.3]  # 70% cost, 30% time\ndistance, path = weighted_sum_approach(graph, source, target, weights)","category":"page"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"warning: Minimization Only\nweighted_sum_approach currently requires all objectives to be minimization (:min). Transform maximization objectives first.","category":"page"},{"location":"manual/multiobjective/#Epsilon-Constraint-Method","page":"Multi-Objective Optimization","title":"Epsilon-Constraint Method","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"Optimize one objective while constraining others:","category":"page"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"# Minimize cost subject to: time ≤ 10.0\ndistance, path = epsilon_constraint_approach(\n    graph, source, target,\n    1,              # Objective index to minimize (cost)\n    [Inf, 10.0]     # Constraints on objectives [cost, time]\n)","category":"page"},{"location":"manual/multiobjective/#Lexicographic-Optimization","page":"Multi-Objective Optimization","title":"Lexicographic Optimization","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"Optimize objectives in priority order:","category":"page"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"priorities = [1, 2]  # First minimize obj 1 (cost), then obj 2 (time)\ndistance, path = lexicographic_approach(graph, source, target, priorities)","category":"page"},{"location":"manual/multiobjective/#Decision-Support","page":"Multi-Objective Optimization","title":"Decision Support","text":"","category":"section"},{"location":"manual/multiobjective/#Finding-the-Knee-Point","page":"Multi-Objective Optimization","title":"Finding the Knee Point","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"The \"knee point\" offers the best trade-off between objectives:","category":"page"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"pareto_solutions = compute_pareto_front(graph, source, target)\n\n# Find solution with best trade-off\nbest_solution = get_knee_point(pareto_solutions)\n\nprintln(\"Best trade-off: \", best_solution.objectives)\nprintln(\"Path: \", best_solution.path)","category":"page"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"The knee point maximizes the angle between solutions, representing the steepest change in the Pareto curve.","category":"page"},{"location":"manual/multiobjective/#Working-with-Objective-Senses","page":"Multi-Objective Optimization","title":"Working with Objective Senses","text":"","category":"section"},{"location":"manual/multiobjective/#Minimization-and-Maximization","page":"Multi-Objective Optimization","title":"Minimization and Maximization","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"# Define mixed objectives\nedges = [MultiObjectiveEdge(1, 2, 1)]\nobjectives = [[5.0, 8.0]]  # [cost_to_minimize, profit_to_maximize]\n\n# Specify senses\ngraph = MultiObjectiveGraph(\n    2, edges, objectives;\n    objective_sense = [:min, :max]  # Minimize cost, maximize profit\n)\n\n# Pareto front respects both senses\npareto_front = compute_pareto_front(graph, 1, 2)","category":"page"},{"location":"manual/multiobjective/#Converting-Maximization-to-Minimization","page":"Multi-Objective Optimization","title":"Converting Maximization to Minimization","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"For scalarization methods that require :min:","category":"page"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"# Original: maximize profit\n# Transform: minimize negative profit\n\noriginal_profit = 100.0\nminimization_objective = -original_profit\n\n# Or subtract from baseline\nbaseline = 1000.0\nminimization_objective = baseline - original_profit","category":"page"},{"location":"manual/multiobjective/#Example:-Cost-Time-Trade-off","page":"Multi-Objective Optimization","title":"Example: Cost-Time Trade-off","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"using OptimShortestPaths\n\n# Supply chain network: minimize cost AND time\nedges = [\n    MultiObjectiveEdge(1, 2, 1),\n    MultiObjectiveEdge(1, 3, 2),\n    MultiObjectiveEdge(2, 4, 3),\n    MultiObjectiveEdge(3, 4, 4)\n]\n\n# [cost, time] for each edge\nobjectives = [\n    [10.0, 1.0],  # Cheap but slow\n    [30.0, 0.5],  # Expensive but fast\n    [5.0, 2.0],   # Cheap and slow\n    [15.0, 1.0]   # Moderate\n]\n\ngraph = MultiObjectiveGraph(4, edges, objectives)\n\n# Find all Pareto-optimal paths\npareto_front = compute_pareto_front(graph, 1, 4)\n\nprintln(\"Found \", length(pareto_front), \" Pareto-optimal solutions:\")\nfor (i, sol) in enumerate(pareto_front)\n    println(\"  $i. Cost: $(sol.objectives[1]), Time: $(sol.objectives[2])\")\nend\n\n# Select best trade-off\nbest = get_knee_point(pareto_front)\nprintln(\"\\nBest trade-off: Cost=$(best.objectives[1]), Time=$(best.objectives[2])\")","category":"page"},{"location":"manual/multiobjective/#Performance-Considerations","page":"Multi-Objective Optimization","title":"Performance Considerations","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"Pareto set size: Can grow exponentially; use max_solutions to bound it\nNumber of objectives: 2-3 objectives typical; 4+ can be slow\nGraph size: Pareto computation is slower than single-objective\nDominated solutions: Automatically filtered during computation","category":"page"},{"location":"manual/multiobjective/#See-Also","page":"Multi-Objective Optimization","title":"See Also","text":"","category":"section"},{"location":"manual/multiobjective/","page":"Multi-Objective Optimization","title":"Multi-Objective Optimization","text":"API Reference - Multi-Objective\nExamples for more complex scenarios","category":"page"}]
}
